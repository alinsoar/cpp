#lang racket				;  -*- scheme -*-

(include "../tools/arith.rkt")
(include "../tools/output.rkt")

(define (gen n stream)
  (and (divisible? n 1000)
       (if (positive? n)
           (__e n)
           (__e "done")))
  (or (zero? n)
      (begin (display (car stream))
	     (newline)
	     (gen (sub1 n)
		  ((cdr stream))))))

(define COUNT (* 60 1000))

(with-output-to-file "primes"
  (lambda()
    (display ";;; this file is generated by mkprimes") (newline)
    (display ";;;") (newline)
    (display ";;; useful to encode an unordered set of numbers as a single number") (newline)
    (display "#(") (newline)
    (display "2")  (newline)
    (gen COUNT (eratosthenes-faster 1 odd-integers))
    (display ")"))
  #:mode   'binary
  #:exists 'truncate/replace)


