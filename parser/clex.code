;; -*- mode:scheme ; buffer-read-only:t -*-

;; TREE CTOK -- this file was automatically generated by asdlgen

;;; clexeme
 (define CTOK.STRING
   (lambda (p:data p:x p:y p:filename)
     (define @TYPE 'clexeme)
     (define @KONS 'CTOK.STRING)
     (define STRING
       (lambda (self)
         (lambda (p:data p:x p:y p:filename)
           (begin
             (tree-type-check-list self ROOT.integer? p:data)
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self)
         (cons @KONS (map tree-repr (list p:data p:x p:y p:filename)))))
     ((lambda (self) ((STRING (self self)) p:data p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.STRING)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.STRING.data p:data)
            ('CTOK.STRING.x p:x)
            ('CTOK.STRING.y p:y)
            ('CTOK.STRING.filename p:filename)
            ('CTOK.clexeme.x ((s s) 'CTOK.STRING.x))
            ('CTOK.clexeme.y ((s s) 'CTOK.STRING.y))
            ('CTOK.clexeme.filename ((s s) 'CTOK.STRING.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.STRING.data (lambda (obj) (obj 'CTOK.STRING.data)))
 (define CTOK.STRING.x (lambda (obj) (obj 'CTOK.STRING.x)))
 (define CTOK.STRING.y (lambda (obj) (obj 'CTOK.STRING.y)))
 (define CTOK.STRING.filename (lambda (obj) (obj 'CTOK.STRING.filename)))
 (define CTOK.STRING?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.STRING))))

 (define CTOK.WSTRING
   (lambda (p:data p:x p:y p:filename)
     (define @TYPE 'clexeme)
     (define @KONS 'CTOK.WSTRING)
     (define WSTRING
       (lambda (self)
         (lambda (p:data p:x p:y p:filename)
           (begin
             (tree-type-check-list self ROOT.integer? p:data)
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self)
         (cons @KONS (map tree-repr (list p:data p:x p:y p:filename)))))
     ((lambda (self) ((WSTRING (self self)) p:data p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.WSTRING)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.WSTRING.data p:data)
            ('CTOK.WSTRING.x p:x)
            ('CTOK.WSTRING.y p:y)
            ('CTOK.WSTRING.filename p:filename)
            ('CTOK.clexeme.x ((s s) 'CTOK.WSTRING.x))
            ('CTOK.clexeme.y ((s s) 'CTOK.WSTRING.y))
            ('CTOK.clexeme.filename ((s s) 'CTOK.WSTRING.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.WSTRING.data (lambda (obj) (obj 'CTOK.WSTRING.data)))
 (define CTOK.WSTRING.x (lambda (obj) (obj 'CTOK.WSTRING.x)))
 (define CTOK.WSTRING.y (lambda (obj) (obj 'CTOK.WSTRING.y)))
 (define CTOK.WSTRING.filename (lambda (obj) (obj 'CTOK.WSTRING.filename)))
 (define CTOK.WSTRING?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.WSTRING))))

 (define CTOK.ID
   (lambda (p:name p:x p:y p:filename)
     (define @TYPE 'clexeme)
     (define @KONS 'CTOK.ID)
     (define ID
       (lambda (self)
         (lambda (p:name p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.symbol? p:name)
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self)
         (cons @KONS (map tree-repr (list p:name p:x p:y p:filename)))))
     ((lambda (self) ((ID (self self)) p:name p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ID)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ID.name p:name)
            ('CTOK.ID.x p:x)
            ('CTOK.ID.y p:y)
            ('CTOK.ID.filename p:filename)
            ('CTOK.clexeme.x ((s s) 'CTOK.ID.x))
            ('CTOK.clexeme.y ((s s) 'CTOK.ID.y))
            ('CTOK.clexeme.filename ((s s) 'CTOK.ID.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ID.name (lambda (obj) (obj 'CTOK.ID.name)))
 (define CTOK.ID.x (lambda (obj) (obj 'CTOK.ID.x)))
 (define CTOK.ID.y (lambda (obj) (obj 'CTOK.ID.y)))
 (define CTOK.ID.filename (lambda (obj) (obj 'CTOK.ID.filename)))
 (define CTOK.ID?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ID))))

 (define CTOK.FLOATING
   (lambda (p:integral p:floating p:x p:y p:filename)
     (define @TYPE 'clexeme)
     (define @KONS 'CTOK.FLOATING)
     (define FLOATING
       (lambda (self)
         (lambda (p:integral p:floating p:x p:y p:filename)
           (begin
             (tree-type-check-list self ROOT.integer? p:integral)
             (tree-type-check-list self ROOT.integer? p:floating)
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self)
         (cons
          @KONS
          (map tree-repr (list p:integral p:floating p:x p:y p:filename)))))
     ((lambda (self)
        ((FLOATING (self self)) p:integral p:floating p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.FLOATING)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.FLOATING.integral p:integral)
            ('CTOK.FLOATING.floating p:floating)
            ('CTOK.FLOATING.x p:x)
            ('CTOK.FLOATING.y p:y)
            ('CTOK.FLOATING.filename p:filename)
            ('CTOK.clexeme.x ((s s) 'CTOK.FLOATING.x))
            ('CTOK.clexeme.y ((s s) 'CTOK.FLOATING.y))
            ('CTOK.clexeme.filename ((s s) 'CTOK.FLOATING.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.FLOATING.integral (lambda (obj) (obj 'CTOK.FLOATING.integral)))
 (define CTOK.FLOATING.floating (lambda (obj) (obj 'CTOK.FLOATING.floating)))
 (define CTOK.FLOATING.x (lambda (obj) (obj 'CTOK.FLOATING.x)))
 (define CTOK.FLOATING.y (lambda (obj) (obj 'CTOK.FLOATING.y)))
 (define CTOK.FLOATING.filename (lambda (obj) (obj 'CTOK.FLOATING.filename)))
 (define CTOK.FLOATING?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.FLOATING))))

 (define CTOK.INTEGER
   (lambda (p:value p:size p:x p:y p:filename)
     (define @TYPE 'clexeme)
     (define @KONS 'CTOK.INTEGER)
     (define INTEGER
       (lambda (self)
         (lambda (p:value p:size p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:value)
             (tree-type-check self ROOT.symbol? p:size)
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self)
         (cons @KONS (map tree-repr (list p:value p:size p:x p:y p:filename)))))
     ((lambda (self) ((INTEGER (self self)) p:value p:size p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.INTEGER)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.INTEGER.value p:value)
            ('CTOK.INTEGER.size p:size)
            ('CTOK.INTEGER.x p:x)
            ('CTOK.INTEGER.y p:y)
            ('CTOK.INTEGER.filename p:filename)
            ('CTOK.clexeme.x ((s s) 'CTOK.INTEGER.x))
            ('CTOK.clexeme.y ((s s) 'CTOK.INTEGER.y))
            ('CTOK.clexeme.filename ((s s) 'CTOK.INTEGER.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.INTEGER.value (lambda (obj) (obj 'CTOK.INTEGER.value)))
 (define CTOK.INTEGER.size (lambda (obj) (obj 'CTOK.INTEGER.size)))
 (define CTOK.INTEGER.x (lambda (obj) (obj 'CTOK.INTEGER.x)))
 (define CTOK.INTEGER.y (lambda (obj) (obj 'CTOK.INTEGER.y)))
 (define CTOK.INTEGER.filename (lambda (obj) (obj 'CTOK.INTEGER.filename)))
 (define CTOK.INTEGER?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.INTEGER))))

 (define CTOK.clexeme?
   (lambda (obj)
     (and (is/sum/type? obj) (procedure? obj) ((obj 'TYCK) 'clexeme))))
;;; selectors for polymorphic attributes
 (define CTOK.clexeme.x
   (lambda (obj)
     (or (CTOK.clexeme? obj) (error "poly-attribute" 'clexeme 'x))
     (obj 'CTOK.clexeme.x)))
 (define CTOK.clexeme.y
   (lambda (obj)
     (or (CTOK.clexeme? obj) (error "poly-attribute" 'clexeme 'y))
     (obj 'CTOK.clexeme.y)))
 (define CTOK.clexeme.filename
   (lambda (obj)
     (or (CTOK.clexeme? obj) (error "poly-attribute" 'clexeme 'filename))
     (obj 'CTOK.clexeme.filename)))



;;; punct
 (define CTOK.COMMA
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.COMMA)
     (define COMMA
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((COMMA (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.COMMA)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.COMMA.x p:x)
            ('CTOK.COMMA.y p:y)
            ('CTOK.COMMA.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.COMMA.x))
            ('CTOK.punct.y ((s s) 'CTOK.COMMA.y))
            ('CTOK.punct.filename ((s s) 'CTOK.COMMA.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.COMMA.x (lambda (obj) (obj 'CTOK.COMMA.x)))
 (define CTOK.COMMA.y (lambda (obj) (obj 'CTOK.COMMA.y)))
 (define CTOK.COMMA.filename (lambda (obj) (obj 'CTOK.COMMA.filename)))
 (define CTOK.COMMA?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.COMMA))))

 (define CTOK.COLON
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.COLON)
     (define COLON
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((COLON (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.COLON)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.COLON.x p:x)
            ('CTOK.COLON.y p:y)
            ('CTOK.COLON.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.COLON.x))
            ('CTOK.punct.y ((s s) 'CTOK.COLON.y))
            ('CTOK.punct.filename ((s s) 'CTOK.COLON.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.COLON.x (lambda (obj) (obj 'CTOK.COLON.x)))
 (define CTOK.COLON.y (lambda (obj) (obj 'CTOK.COLON.y)))
 (define CTOK.COLON.filename (lambda (obj) (obj 'CTOK.COLON.filename)))
 (define CTOK.COLON?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.COLON))))

 (define CTOK.SEMICOLON
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.SEMICOLON)
     (define SEMICOLON
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((SEMICOLON (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.SEMICOLON)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.SEMICOLON.x p:x)
            ('CTOK.SEMICOLON.y p:y)
            ('CTOK.SEMICOLON.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.SEMICOLON.x))
            ('CTOK.punct.y ((s s) 'CTOK.SEMICOLON.y))
            ('CTOK.punct.filename ((s s) 'CTOK.SEMICOLON.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.SEMICOLON.x (lambda (obj) (obj 'CTOK.SEMICOLON.x)))
 (define CTOK.SEMICOLON.y (lambda (obj) (obj 'CTOK.SEMICOLON.y)))
 (define CTOK.SEMICOLON.filename (lambda (obj) (obj 'CTOK.SEMICOLON.filename)))
 (define CTOK.SEMICOLON?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.SEMICOLON))))

 (define CTOK.ELLIPSIS
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ELLIPSIS)
     (define ELLIPSIS
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ELLIPSIS (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ELLIPSIS)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ELLIPSIS.x p:x)
            ('CTOK.ELLIPSIS.y p:y)
            ('CTOK.ELLIPSIS.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ELLIPSIS.x))
            ('CTOK.punct.y ((s s) 'CTOK.ELLIPSIS.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ELLIPSIS.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ELLIPSIS.x (lambda (obj) (obj 'CTOK.ELLIPSIS.x)))
 (define CTOK.ELLIPSIS.y (lambda (obj) (obj 'CTOK.ELLIPSIS.y)))
 (define CTOK.ELLIPSIS.filename (lambda (obj) (obj 'CTOK.ELLIPSIS.filename)))
 (define CTOK.ELLIPSIS?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ELLIPSIS))))

 (define CTOK.OPEN_BRACKET
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.OPEN_BRACKET)
     (define OPEN_BRACKET
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((OPEN_BRACKET (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.OPEN_BRACKET)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.OPEN_BRACKET.x p:x)
            ('CTOK.OPEN_BRACKET.y p:y)
            ('CTOK.OPEN_BRACKET.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.OPEN_BRACKET.x))
            ('CTOK.punct.y ((s s) 'CTOK.OPEN_BRACKET.y))
            ('CTOK.punct.filename ((s s) 'CTOK.OPEN_BRACKET.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.OPEN_BRACKET.x (lambda (obj) (obj 'CTOK.OPEN_BRACKET.x)))
 (define CTOK.OPEN_BRACKET.y (lambda (obj) (obj 'CTOK.OPEN_BRACKET.y)))
 (define CTOK.OPEN_BRACKET.filename
   (lambda (obj) (obj 'CTOK.OPEN_BRACKET.filename)))
 (define CTOK.OPEN_BRACKET?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.OPEN_BRACKET))))

 (define CTOK.CLOSE_BRACKET
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.CLOSE_BRACKET)
     (define CLOSE_BRACKET
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((CLOSE_BRACKET (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.CLOSE_BRACKET)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.CLOSE_BRACKET.x p:x)
            ('CTOK.CLOSE_BRACKET.y p:y)
            ('CTOK.CLOSE_BRACKET.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.CLOSE_BRACKET.x))
            ('CTOK.punct.y ((s s) 'CTOK.CLOSE_BRACKET.y))
            ('CTOK.punct.filename ((s s) 'CTOK.CLOSE_BRACKET.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.CLOSE_BRACKET.x (lambda (obj) (obj 'CTOK.CLOSE_BRACKET.x)))
 (define CTOK.CLOSE_BRACKET.y (lambda (obj) (obj 'CTOK.CLOSE_BRACKET.y)))
 (define CTOK.CLOSE_BRACKET.filename
   (lambda (obj) (obj 'CTOK.CLOSE_BRACKET.filename)))
 (define CTOK.CLOSE_BRACKET?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.CLOSE_BRACKET))))

 (define CTOK.OPEN_BRACE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.OPEN_BRACE)
     (define OPEN_BRACE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((OPEN_BRACE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.OPEN_BRACE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.OPEN_BRACE.x p:x)
            ('CTOK.OPEN_BRACE.y p:y)
            ('CTOK.OPEN_BRACE.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.OPEN_BRACE.x))
            ('CTOK.punct.y ((s s) 'CTOK.OPEN_BRACE.y))
            ('CTOK.punct.filename ((s s) 'CTOK.OPEN_BRACE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.OPEN_BRACE.x (lambda (obj) (obj 'CTOK.OPEN_BRACE.x)))
 (define CTOK.OPEN_BRACE.y (lambda (obj) (obj 'CTOK.OPEN_BRACE.y)))
 (define CTOK.OPEN_BRACE.filename
   (lambda (obj) (obj 'CTOK.OPEN_BRACE.filename)))
 (define CTOK.OPEN_BRACE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.OPEN_BRACE))))

 (define CTOK.CLOSE_BRACE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.CLOSE_BRACE)
     (define CLOSE_BRACE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((CLOSE_BRACE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.CLOSE_BRACE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.CLOSE_BRACE.x p:x)
            ('CTOK.CLOSE_BRACE.y p:y)
            ('CTOK.CLOSE_BRACE.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.CLOSE_BRACE.x))
            ('CTOK.punct.y ((s s) 'CTOK.CLOSE_BRACE.y))
            ('CTOK.punct.filename ((s s) 'CTOK.CLOSE_BRACE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.CLOSE_BRACE.x (lambda (obj) (obj 'CTOK.CLOSE_BRACE.x)))
 (define CTOK.CLOSE_BRACE.y (lambda (obj) (obj 'CTOK.CLOSE_BRACE.y)))
 (define CTOK.CLOSE_BRACE.filename
   (lambda (obj) (obj 'CTOK.CLOSE_BRACE.filename)))
 (define CTOK.CLOSE_BRACE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.CLOSE_BRACE))))

 (define CTOK.OPEN_PAREN
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.OPEN_PAREN)
     (define OPEN_PAREN
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((OPEN_PAREN (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.OPEN_PAREN)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.OPEN_PAREN.x p:x)
            ('CTOK.OPEN_PAREN.y p:y)
            ('CTOK.OPEN_PAREN.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.OPEN_PAREN.x))
            ('CTOK.punct.y ((s s) 'CTOK.OPEN_PAREN.y))
            ('CTOK.punct.filename ((s s) 'CTOK.OPEN_PAREN.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.OPEN_PAREN.x (lambda (obj) (obj 'CTOK.OPEN_PAREN.x)))
 (define CTOK.OPEN_PAREN.y (lambda (obj) (obj 'CTOK.OPEN_PAREN.y)))
 (define CTOK.OPEN_PAREN.filename
   (lambda (obj) (obj 'CTOK.OPEN_PAREN.filename)))
 (define CTOK.OPEN_PAREN?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.OPEN_PAREN))))

 (define CTOK.CLOSE_PAREN
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.CLOSE_PAREN)
     (define CLOSE_PAREN
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((CLOSE_PAREN (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.CLOSE_PAREN)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.CLOSE_PAREN.x p:x)
            ('CTOK.CLOSE_PAREN.y p:y)
            ('CTOK.CLOSE_PAREN.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.CLOSE_PAREN.x))
            ('CTOK.punct.y ((s s) 'CTOK.CLOSE_PAREN.y))
            ('CTOK.punct.filename ((s s) 'CTOK.CLOSE_PAREN.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.CLOSE_PAREN.x (lambda (obj) (obj 'CTOK.CLOSE_PAREN.x)))
 (define CTOK.CLOSE_PAREN.y (lambda (obj) (obj 'CTOK.CLOSE_PAREN.y)))
 (define CTOK.CLOSE_PAREN.filename
   (lambda (obj) (obj 'CTOK.CLOSE_PAREN.filename)))
 (define CTOK.CLOSE_PAREN?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.CLOSE_PAREN))))

 (define CTOK.QUESTION
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.QUESTION)
     (define QUESTION
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((QUESTION (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.QUESTION)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.QUESTION.x p:x)
            ('CTOK.QUESTION.y p:y)
            ('CTOK.QUESTION.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.QUESTION.x))
            ('CTOK.punct.y ((s s) 'CTOK.QUESTION.y))
            ('CTOK.punct.filename ((s s) 'CTOK.QUESTION.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.QUESTION.x (lambda (obj) (obj 'CTOK.QUESTION.x)))
 (define CTOK.QUESTION.y (lambda (obj) (obj 'CTOK.QUESTION.y)))
 (define CTOK.QUESTION.filename (lambda (obj) (obj 'CTOK.QUESTION.filename)))
 (define CTOK.QUESTION?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.QUESTION))))

 (define CTOK.LOGOR
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.LOGOR)
     (define LOGOR
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((LOGOR (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.LOGOR)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.LOGOR.x p:x)
            ('CTOK.LOGOR.y p:y)
            ('CTOK.LOGOR.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.LOGOR.x))
            ('CTOK.punct.y ((s s) 'CTOK.LOGOR.y))
            ('CTOK.punct.filename ((s s) 'CTOK.LOGOR.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.LOGOR.x (lambda (obj) (obj 'CTOK.LOGOR.x)))
 (define CTOK.LOGOR.y (lambda (obj) (obj 'CTOK.LOGOR.y)))
 (define CTOK.LOGOR.filename (lambda (obj) (obj 'CTOK.LOGOR.filename)))
 (define CTOK.LOGOR?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.LOGOR))))

 (define CTOK.LOGAND
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.LOGAND)
     (define LOGAND
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((LOGAND (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.LOGAND)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.LOGAND.x p:x)
            ('CTOK.LOGAND.y p:y)
            ('CTOK.LOGAND.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.LOGAND.x))
            ('CTOK.punct.y ((s s) 'CTOK.LOGAND.y))
            ('CTOK.punct.filename ((s s) 'CTOK.LOGAND.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.LOGAND.x (lambda (obj) (obj 'CTOK.LOGAND.x)))
 (define CTOK.LOGAND.y (lambda (obj) (obj 'CTOK.LOGAND.y)))
 (define CTOK.LOGAND.filename (lambda (obj) (obj 'CTOK.LOGAND.filename)))
 (define CTOK.LOGAND?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.LOGAND))))

 (define CTOK.LOGNOT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.LOGNOT)
     (define LOGNOT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((LOGNOT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.LOGNOT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.LOGNOT.x p:x)
            ('CTOK.LOGNOT.y p:y)
            ('CTOK.LOGNOT.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.LOGNOT.x))
            ('CTOK.punct.y ((s s) 'CTOK.LOGNOT.y))
            ('CTOK.punct.filename ((s s) 'CTOK.LOGNOT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.LOGNOT.x (lambda (obj) (obj 'CTOK.LOGNOT.x)))
 (define CTOK.LOGNOT.y (lambda (obj) (obj 'CTOK.LOGNOT.y)))
 (define CTOK.LOGNOT.filename (lambda (obj) (obj 'CTOK.LOGNOT.filename)))
 (define CTOK.LOGNOT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.LOGNOT))))

 (define CTOK.INCLUSIVE_OR
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.INCLUSIVE_OR)
     (define INCLUSIVE_OR
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((INCLUSIVE_OR (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.INCLUSIVE_OR)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.INCLUSIVE_OR.x p:x)
            ('CTOK.INCLUSIVE_OR.y p:y)
            ('CTOK.INCLUSIVE_OR.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.INCLUSIVE_OR.x))
            ('CTOK.punct.y ((s s) 'CTOK.INCLUSIVE_OR.y))
            ('CTOK.punct.filename ((s s) 'CTOK.INCLUSIVE_OR.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.INCLUSIVE_OR.x (lambda (obj) (obj 'CTOK.INCLUSIVE_OR.x)))
 (define CTOK.INCLUSIVE_OR.y (lambda (obj) (obj 'CTOK.INCLUSIVE_OR.y)))
 (define CTOK.INCLUSIVE_OR.filename
   (lambda (obj) (obj 'CTOK.INCLUSIVE_OR.filename)))
 (define CTOK.INCLUSIVE_OR?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.INCLUSIVE_OR))))

 (define CTOK.EXCLUSIVE_OR
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.EXCLUSIVE_OR)
     (define EXCLUSIVE_OR
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((EXCLUSIVE_OR (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.EXCLUSIVE_OR)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.EXCLUSIVE_OR.x p:x)
            ('CTOK.EXCLUSIVE_OR.y p:y)
            ('CTOK.EXCLUSIVE_OR.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.EXCLUSIVE_OR.x))
            ('CTOK.punct.y ((s s) 'CTOK.EXCLUSIVE_OR.y))
            ('CTOK.punct.filename ((s s) 'CTOK.EXCLUSIVE_OR.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.EXCLUSIVE_OR.x (lambda (obj) (obj 'CTOK.EXCLUSIVE_OR.x)))
 (define CTOK.EXCLUSIVE_OR.y (lambda (obj) (obj 'CTOK.EXCLUSIVE_OR.y)))
 (define CTOK.EXCLUSIVE_OR.filename
   (lambda (obj) (obj 'CTOK.EXCLUSIVE_OR.filename)))
 (define CTOK.EXCLUSIVE_OR?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.EXCLUSIVE_OR))))

 (define CTOK.AND
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.AND)
     (define AND
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((AND (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.AND)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.AND.x p:x)
            ('CTOK.AND.y p:y)
            ('CTOK.AND.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.AND.x))
            ('CTOK.punct.y ((s s) 'CTOK.AND.y))
            ('CTOK.punct.filename ((s s) 'CTOK.AND.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.AND.x (lambda (obj) (obj 'CTOK.AND.x)))
 (define CTOK.AND.y (lambda (obj) (obj 'CTOK.AND.y)))
 (define CTOK.AND.filename (lambda (obj) (obj 'CTOK.AND.filename)))
 (define CTOK.AND?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.AND))))

 (define CTOK.NOT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.NOT)
     (define NOT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((NOT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.NOT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.NOT.x p:x)
            ('CTOK.NOT.y p:y)
            ('CTOK.NOT.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.NOT.x))
            ('CTOK.punct.y ((s s) 'CTOK.NOT.y))
            ('CTOK.punct.filename ((s s) 'CTOK.NOT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.NOT.x (lambda (obj) (obj 'CTOK.NOT.x)))
 (define CTOK.NOT.y (lambda (obj) (obj 'CTOK.NOT.y)))
 (define CTOK.NOT.filename (lambda (obj) (obj 'CTOK.NOT.filename)))
 (define CTOK.NOT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.NOT))))

 (define CTOK.EQUAL
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.EQUAL)
     (define EQUAL
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((EQUAL (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.EQUAL)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.EQUAL.x p:x)
            ('CTOK.EQUAL.y p:y)
            ('CTOK.EQUAL.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.EQUAL.x))
            ('CTOK.punct.y ((s s) 'CTOK.EQUAL.y))
            ('CTOK.punct.filename ((s s) 'CTOK.EQUAL.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.EQUAL.x (lambda (obj) (obj 'CTOK.EQUAL.x)))
 (define CTOK.EQUAL.y (lambda (obj) (obj 'CTOK.EQUAL.y)))
 (define CTOK.EQUAL.filename (lambda (obj) (obj 'CTOK.EQUAL.filename)))
 (define CTOK.EQUAL?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.EQUAL))))

 (define CTOK.DIFFERENT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.DIFFERENT)
     (define DIFFERENT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((DIFFERENT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.DIFFERENT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.DIFFERENT.x p:x)
            ('CTOK.DIFFERENT.y p:y)
            ('CTOK.DIFFERENT.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.DIFFERENT.x))
            ('CTOK.punct.y ((s s) 'CTOK.DIFFERENT.y))
            ('CTOK.punct.filename ((s s) 'CTOK.DIFFERENT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.DIFFERENT.x (lambda (obj) (obj 'CTOK.DIFFERENT.x)))
 (define CTOK.DIFFERENT.y (lambda (obj) (obj 'CTOK.DIFFERENT.y)))
 (define CTOK.DIFFERENT.filename (lambda (obj) (obj 'CTOK.DIFFERENT.filename)))
 (define CTOK.DIFFERENT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.DIFFERENT))))

 (define CTOK.LESS_THAN
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.LESS_THAN)
     (define LESS_THAN
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((LESS_THAN (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.LESS_THAN)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.LESS_THAN.x p:x)
            ('CTOK.LESS_THAN.y p:y)
            ('CTOK.LESS_THAN.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.LESS_THAN.x))
            ('CTOK.punct.y ((s s) 'CTOK.LESS_THAN.y))
            ('CTOK.punct.filename ((s s) 'CTOK.LESS_THAN.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.LESS_THAN.x (lambda (obj) (obj 'CTOK.LESS_THAN.x)))
 (define CTOK.LESS_THAN.y (lambda (obj) (obj 'CTOK.LESS_THAN.y)))
 (define CTOK.LESS_THAN.filename (lambda (obj) (obj 'CTOK.LESS_THAN.filename)))
 (define CTOK.LESS_THAN?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.LESS_THAN))))

 (define CTOK.GREATER_THAN
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.GREATER_THAN)
     (define GREATER_THAN
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((GREATER_THAN (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.GREATER_THAN)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.GREATER_THAN.x p:x)
            ('CTOK.GREATER_THAN.y p:y)
            ('CTOK.GREATER_THAN.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.GREATER_THAN.x))
            ('CTOK.punct.y ((s s) 'CTOK.GREATER_THAN.y))
            ('CTOK.punct.filename ((s s) 'CTOK.GREATER_THAN.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.GREATER_THAN.x (lambda (obj) (obj 'CTOK.GREATER_THAN.x)))
 (define CTOK.GREATER_THAN.y (lambda (obj) (obj 'CTOK.GREATER_THAN.y)))
 (define CTOK.GREATER_THAN.filename
   (lambda (obj) (obj 'CTOK.GREATER_THAN.filename)))
 (define CTOK.GREATER_THAN?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.GREATER_THAN))))

 (define CTOK.LESS_OR_EQUAL
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.LESS_OR_EQUAL)
     (define LESS_OR_EQUAL
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((LESS_OR_EQUAL (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.LESS_OR_EQUAL)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.LESS_OR_EQUAL.x p:x)
            ('CTOK.LESS_OR_EQUAL.y p:y)
            ('CTOK.LESS_OR_EQUAL.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.LESS_OR_EQUAL.x))
            ('CTOK.punct.y ((s s) 'CTOK.LESS_OR_EQUAL.y))
            ('CTOK.punct.filename ((s s) 'CTOK.LESS_OR_EQUAL.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.LESS_OR_EQUAL.x (lambda (obj) (obj 'CTOK.LESS_OR_EQUAL.x)))
 (define CTOK.LESS_OR_EQUAL.y (lambda (obj) (obj 'CTOK.LESS_OR_EQUAL.y)))
 (define CTOK.LESS_OR_EQUAL.filename
   (lambda (obj) (obj 'CTOK.LESS_OR_EQUAL.filename)))
 (define CTOK.LESS_OR_EQUAL?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.LESS_OR_EQUAL))))

 (define CTOK.GREATER_OR_EQUAL
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.GREATER_OR_EQUAL)
     (define GREATER_OR_EQUAL
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((GREATER_OR_EQUAL (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.GREATER_OR_EQUAL)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.GREATER_OR_EQUAL.x p:x)
            ('CTOK.GREATER_OR_EQUAL.y p:y)
            ('CTOK.GREATER_OR_EQUAL.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.GREATER_OR_EQUAL.x))
            ('CTOK.punct.y ((s s) 'CTOK.GREATER_OR_EQUAL.y))
            ('CTOK.punct.filename ((s s) 'CTOK.GREATER_OR_EQUAL.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.GREATER_OR_EQUAL.x (lambda (obj) (obj 'CTOK.GREATER_OR_EQUAL.x)))
 (define CTOK.GREATER_OR_EQUAL.y (lambda (obj) (obj 'CTOK.GREATER_OR_EQUAL.y)))
 (define CTOK.GREATER_OR_EQUAL.filename
   (lambda (obj) (obj 'CTOK.GREATER_OR_EQUAL.filename)))
 (define CTOK.GREATER_OR_EQUAL?
   (lambda (obj)
     (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.GREATER_OR_EQUAL))))

 (define CTOK.ASTERISK
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASTERISK)
     (define ASTERISK
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASTERISK (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASTERISK)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASTERISK.x p:x)
            ('CTOK.ASTERISK.y p:y)
            ('CTOK.ASTERISK.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASTERISK.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASTERISK.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASTERISK.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASTERISK.x (lambda (obj) (obj 'CTOK.ASTERISK.x)))
 (define CTOK.ASTERISK.y (lambda (obj) (obj 'CTOK.ASTERISK.y)))
 (define CTOK.ASTERISK.filename (lambda (obj) (obj 'CTOK.ASTERISK.filename)))
 (define CTOK.ASTERISK?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASTERISK))))

 (define CTOK.DIVISION
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.DIVISION)
     (define DIVISION
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((DIVISION (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.DIVISION)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.DIVISION.x p:x)
            ('CTOK.DIVISION.y p:y)
            ('CTOK.DIVISION.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.DIVISION.x))
            ('CTOK.punct.y ((s s) 'CTOK.DIVISION.y))
            ('CTOK.punct.filename ((s s) 'CTOK.DIVISION.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.DIVISION.x (lambda (obj) (obj 'CTOK.DIVISION.x)))
 (define CTOK.DIVISION.y (lambda (obj) (obj 'CTOK.DIVISION.y)))
 (define CTOK.DIVISION.filename (lambda (obj) (obj 'CTOK.DIVISION.filename)))
 (define CTOK.DIVISION?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.DIVISION))))

 (define CTOK.REMAINDER
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.REMAINDER)
     (define REMAINDER
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((REMAINDER (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.REMAINDER)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.REMAINDER.x p:x)
            ('CTOK.REMAINDER.y p:y)
            ('CTOK.REMAINDER.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.REMAINDER.x))
            ('CTOK.punct.y ((s s) 'CTOK.REMAINDER.y))
            ('CTOK.punct.filename ((s s) 'CTOK.REMAINDER.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.REMAINDER.x (lambda (obj) (obj 'CTOK.REMAINDER.x)))
 (define CTOK.REMAINDER.y (lambda (obj) (obj 'CTOK.REMAINDER.y)))
 (define CTOK.REMAINDER.filename (lambda (obj) (obj 'CTOK.REMAINDER.filename)))
 (define CTOK.REMAINDER?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.REMAINDER))))

 (define CTOK.ADDITION
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ADDITION)
     (define ADDITION
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ADDITION (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ADDITION)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ADDITION.x p:x)
            ('CTOK.ADDITION.y p:y)
            ('CTOK.ADDITION.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ADDITION.x))
            ('CTOK.punct.y ((s s) 'CTOK.ADDITION.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ADDITION.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ADDITION.x (lambda (obj) (obj 'CTOK.ADDITION.x)))
 (define CTOK.ADDITION.y (lambda (obj) (obj 'CTOK.ADDITION.y)))
 (define CTOK.ADDITION.filename (lambda (obj) (obj 'CTOK.ADDITION.filename)))
 (define CTOK.ADDITION?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ADDITION))))

 (define CTOK.SUBTRACTION
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.SUBTRACTION)
     (define SUBTRACTION
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((SUBTRACTION (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.SUBTRACTION)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.SUBTRACTION.x p:x)
            ('CTOK.SUBTRACTION.y p:y)
            ('CTOK.SUBTRACTION.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.SUBTRACTION.x))
            ('CTOK.punct.y ((s s) 'CTOK.SUBTRACTION.y))
            ('CTOK.punct.filename ((s s) 'CTOK.SUBTRACTION.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.SUBTRACTION.x (lambda (obj) (obj 'CTOK.SUBTRACTION.x)))
 (define CTOK.SUBTRACTION.y (lambda (obj) (obj 'CTOK.SUBTRACTION.y)))
 (define CTOK.SUBTRACTION.filename
   (lambda (obj) (obj 'CTOK.SUBTRACTION.filename)))
 (define CTOK.SUBTRACTION?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.SUBTRACTION))))

 (define CTOK.SHIFT_LEFT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.SHIFT_LEFT)
     (define SHIFT_LEFT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((SHIFT_LEFT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.SHIFT_LEFT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.SHIFT_LEFT.x p:x)
            ('CTOK.SHIFT_LEFT.y p:y)
            ('CTOK.SHIFT_LEFT.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.SHIFT_LEFT.x))
            ('CTOK.punct.y ((s s) 'CTOK.SHIFT_LEFT.y))
            ('CTOK.punct.filename ((s s) 'CTOK.SHIFT_LEFT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.SHIFT_LEFT.x (lambda (obj) (obj 'CTOK.SHIFT_LEFT.x)))
 (define CTOK.SHIFT_LEFT.y (lambda (obj) (obj 'CTOK.SHIFT_LEFT.y)))
 (define CTOK.SHIFT_LEFT.filename
   (lambda (obj) (obj 'CTOK.SHIFT_LEFT.filename)))
 (define CTOK.SHIFT_LEFT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.SHIFT_LEFT))))

 (define CTOK.SHIFT_RIGHT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.SHIFT_RIGHT)
     (define SHIFT_RIGHT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((SHIFT_RIGHT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.SHIFT_RIGHT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.SHIFT_RIGHT.x p:x)
            ('CTOK.SHIFT_RIGHT.y p:y)
            ('CTOK.SHIFT_RIGHT.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.SHIFT_RIGHT.x))
            ('CTOK.punct.y ((s s) 'CTOK.SHIFT_RIGHT.y))
            ('CTOK.punct.filename ((s s) 'CTOK.SHIFT_RIGHT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.SHIFT_RIGHT.x (lambda (obj) (obj 'CTOK.SHIFT_RIGHT.x)))
 (define CTOK.SHIFT_RIGHT.y (lambda (obj) (obj 'CTOK.SHIFT_RIGHT.y)))
 (define CTOK.SHIFT_RIGHT.filename
   (lambda (obj) (obj 'CTOK.SHIFT_RIGHT.filename)))
 (define CTOK.SHIFT_RIGHT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.SHIFT_RIGHT))))

 (define CTOK.DOT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.DOT)
     (define DOT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((DOT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.DOT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.DOT.x p:x)
            ('CTOK.DOT.y p:y)
            ('CTOK.DOT.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.DOT.x))
            ('CTOK.punct.y ((s s) 'CTOK.DOT.y))
            ('CTOK.punct.filename ((s s) 'CTOK.DOT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.DOT.x (lambda (obj) (obj 'CTOK.DOT.x)))
 (define CTOK.DOT.y (lambda (obj) (obj 'CTOK.DOT.y)))
 (define CTOK.DOT.filename (lambda (obj) (obj 'CTOK.DOT.filename)))
 (define CTOK.DOT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.DOT))))

 (define CTOK.ARROW
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ARROW)
     (define ARROW
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ARROW (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ARROW)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ARROW.x p:x)
            ('CTOK.ARROW.y p:y)
            ('CTOK.ARROW.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ARROW.x))
            ('CTOK.punct.y ((s s) 'CTOK.ARROW.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ARROW.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ARROW.x (lambda (obj) (obj 'CTOK.ARROW.x)))
 (define CTOK.ARROW.y (lambda (obj) (obj 'CTOK.ARROW.y)))
 (define CTOK.ARROW.filename (lambda (obj) (obj 'CTOK.ARROW.filename)))
 (define CTOK.ARROW?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ARROW))))

 (define CTOK.INCREMENTER
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.INCREMENTER)
     (define INCREMENTER
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((INCREMENTER (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.INCREMENTER)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.INCREMENTER.x p:x)
            ('CTOK.INCREMENTER.y p:y)
            ('CTOK.INCREMENTER.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.INCREMENTER.x))
            ('CTOK.punct.y ((s s) 'CTOK.INCREMENTER.y))
            ('CTOK.punct.filename ((s s) 'CTOK.INCREMENTER.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.INCREMENTER.x (lambda (obj) (obj 'CTOK.INCREMENTER.x)))
 (define CTOK.INCREMENTER.y (lambda (obj) (obj 'CTOK.INCREMENTER.y)))
 (define CTOK.INCREMENTER.filename
   (lambda (obj) (obj 'CTOK.INCREMENTER.filename)))
 (define CTOK.INCREMENTER?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.INCREMENTER))))

 (define CTOK.DECREMENTER
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.DECREMENTER)
     (define DECREMENTER
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((DECREMENTER (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.DECREMENTER)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.DECREMENTER.x p:x)
            ('CTOK.DECREMENTER.y p:y)
            ('CTOK.DECREMENTER.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.DECREMENTER.x))
            ('CTOK.punct.y ((s s) 'CTOK.DECREMENTER.y))
            ('CTOK.punct.filename ((s s) 'CTOK.DECREMENTER.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.DECREMENTER.x (lambda (obj) (obj 'CTOK.DECREMENTER.x)))
 (define CTOK.DECREMENTER.y (lambda (obj) (obj 'CTOK.DECREMENTER.y)))
 (define CTOK.DECREMENTER.filename
   (lambda (obj) (obj 'CTOK.DECREMENTER.filename)))
 (define CTOK.DECREMENTER?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.DECREMENTER))))

 (define CTOK.ASSIGN
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN)
     (define ASSIGN
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN.x p:x)
            ('CTOK.ASSIGN.y p:y)
            ('CTOK.ASSIGN.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN.x (lambda (obj) (obj 'CTOK.ASSIGN.x)))
 (define CTOK.ASSIGN.y (lambda (obj) (obj 'CTOK.ASSIGN.y)))
 (define CTOK.ASSIGN.filename (lambda (obj) (obj 'CTOK.ASSIGN.filename)))
 (define CTOK.ASSIGN?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN))))

 (define CTOK.ASSIGN_MUL
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_MUL)
     (define ASSIGN_MUL
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_MUL (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_MUL)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_MUL.x p:x)
            ('CTOK.ASSIGN_MUL.y p:y)
            ('CTOK.ASSIGN_MUL.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_MUL.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_MUL.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_MUL.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_MUL.x (lambda (obj) (obj 'CTOK.ASSIGN_MUL.x)))
 (define CTOK.ASSIGN_MUL.y (lambda (obj) (obj 'CTOK.ASSIGN_MUL.y)))
 (define CTOK.ASSIGN_MUL.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_MUL.filename)))
 (define CTOK.ASSIGN_MUL?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_MUL))))

 (define CTOK.ASSIGN_DIV
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_DIV)
     (define ASSIGN_DIV
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_DIV (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_DIV)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_DIV.x p:x)
            ('CTOK.ASSIGN_DIV.y p:y)
            ('CTOK.ASSIGN_DIV.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_DIV.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_DIV.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_DIV.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_DIV.x (lambda (obj) (obj 'CTOK.ASSIGN_DIV.x)))
 (define CTOK.ASSIGN_DIV.y (lambda (obj) (obj 'CTOK.ASSIGN_DIV.y)))
 (define CTOK.ASSIGN_DIV.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_DIV.filename)))
 (define CTOK.ASSIGN_DIV?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_DIV))))

 (define CTOK.ASSIGN_REM
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_REM)
     (define ASSIGN_REM
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_REM (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_REM)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_REM.x p:x)
            ('CTOK.ASSIGN_REM.y p:y)
            ('CTOK.ASSIGN_REM.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_REM.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_REM.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_REM.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_REM.x (lambda (obj) (obj 'CTOK.ASSIGN_REM.x)))
 (define CTOK.ASSIGN_REM.y (lambda (obj) (obj 'CTOK.ASSIGN_REM.y)))
 (define CTOK.ASSIGN_REM.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_REM.filename)))
 (define CTOK.ASSIGN_REM?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_REM))))

 (define CTOK.ASSIGN_ADD
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_ADD)
     (define ASSIGN_ADD
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_ADD (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_ADD)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_ADD.x p:x)
            ('CTOK.ASSIGN_ADD.y p:y)
            ('CTOK.ASSIGN_ADD.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_ADD.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_ADD.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_ADD.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_ADD.x (lambda (obj) (obj 'CTOK.ASSIGN_ADD.x)))
 (define CTOK.ASSIGN_ADD.y (lambda (obj) (obj 'CTOK.ASSIGN_ADD.y)))
 (define CTOK.ASSIGN_ADD.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_ADD.filename)))
 (define CTOK.ASSIGN_ADD?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_ADD))))

 (define CTOK.ASSIGN_SUB
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_SUB)
     (define ASSIGN_SUB
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_SUB (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_SUB)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_SUB.x p:x)
            ('CTOK.ASSIGN_SUB.y p:y)
            ('CTOK.ASSIGN_SUB.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_SUB.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_SUB.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_SUB.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_SUB.x (lambda (obj) (obj 'CTOK.ASSIGN_SUB.x)))
 (define CTOK.ASSIGN_SUB.y (lambda (obj) (obj 'CTOK.ASSIGN_SUB.y)))
 (define CTOK.ASSIGN_SUB.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_SUB.filename)))
 (define CTOK.ASSIGN_SUB?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_SUB))))

 (define CTOK.ASSIGN_SHL
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_SHL)
     (define ASSIGN_SHL
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_SHL (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_SHL)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_SHL.x p:x)
            ('CTOK.ASSIGN_SHL.y p:y)
            ('CTOK.ASSIGN_SHL.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_SHL.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_SHL.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_SHL.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_SHL.x (lambda (obj) (obj 'CTOK.ASSIGN_SHL.x)))
 (define CTOK.ASSIGN_SHL.y (lambda (obj) (obj 'CTOK.ASSIGN_SHL.y)))
 (define CTOK.ASSIGN_SHL.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_SHL.filename)))
 (define CTOK.ASSIGN_SHL?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_SHL))))

 (define CTOK.ASSIGN_SHR
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_SHR)
     (define ASSIGN_SHR
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_SHR (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_SHR)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_SHR.x p:x)
            ('CTOK.ASSIGN_SHR.y p:y)
            ('CTOK.ASSIGN_SHR.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_SHR.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_SHR.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_SHR.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_SHR.x (lambda (obj) (obj 'CTOK.ASSIGN_SHR.x)))
 (define CTOK.ASSIGN_SHR.y (lambda (obj) (obj 'CTOK.ASSIGN_SHR.y)))
 (define CTOK.ASSIGN_SHR.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_SHR.filename)))
 (define CTOK.ASSIGN_SHR?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_SHR))))

 (define CTOK.ASSIGN_AND
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_AND)
     (define ASSIGN_AND
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_AND (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_AND)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_AND.x p:x)
            ('CTOK.ASSIGN_AND.y p:y)
            ('CTOK.ASSIGN_AND.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_AND.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_AND.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_AND.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_AND.x (lambda (obj) (obj 'CTOK.ASSIGN_AND.x)))
 (define CTOK.ASSIGN_AND.y (lambda (obj) (obj 'CTOK.ASSIGN_AND.y)))
 (define CTOK.ASSIGN_AND.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_AND.filename)))
 (define CTOK.ASSIGN_AND?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_AND))))

 (define CTOK.ASSIGN_XOR
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_XOR)
     (define ASSIGN_XOR
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_XOR (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_XOR)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_XOR.x p:x)
            ('CTOK.ASSIGN_XOR.y p:y)
            ('CTOK.ASSIGN_XOR.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_XOR.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_XOR.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_XOR.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_XOR.x (lambda (obj) (obj 'CTOK.ASSIGN_XOR.x)))
 (define CTOK.ASSIGN_XOR.y (lambda (obj) (obj 'CTOK.ASSIGN_XOR.y)))
 (define CTOK.ASSIGN_XOR.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_XOR.filename)))
 (define CTOK.ASSIGN_XOR?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_XOR))))

 (define CTOK.ASSIGN_IOR
   (lambda (p:x p:y p:filename)
     (define @TYPE 'punct)
     (define @KONS 'CTOK.ASSIGN_IOR)
     (define ASSIGN_IOR
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ASSIGN_IOR (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ASSIGN_IOR)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ASSIGN_IOR.x p:x)
            ('CTOK.ASSIGN_IOR.y p:y)
            ('CTOK.ASSIGN_IOR.filename p:filename)
            ('CTOK.punct.x ((s s) 'CTOK.ASSIGN_IOR.x))
            ('CTOK.punct.y ((s s) 'CTOK.ASSIGN_IOR.y))
            ('CTOK.punct.filename ((s s) 'CTOK.ASSIGN_IOR.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ASSIGN_IOR.x (lambda (obj) (obj 'CTOK.ASSIGN_IOR.x)))
 (define CTOK.ASSIGN_IOR.y (lambda (obj) (obj 'CTOK.ASSIGN_IOR.y)))
 (define CTOK.ASSIGN_IOR.filename
   (lambda (obj) (obj 'CTOK.ASSIGN_IOR.filename)))
 (define CTOK.ASSIGN_IOR?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ASSIGN_IOR))))

 (define CTOK.punct?
   (lambda (obj)
     (and (is/sum/type? obj) (procedure? obj) ((obj 'TYCK) 'punct))))
;;; selectors for polymorphic attributes
 (define CTOK.punct.x
   (lambda (obj)
     (or (CTOK.punct? obj) (error "poly-attribute" 'punct 'x))
     (obj 'CTOK.punct.x)))
 (define CTOK.punct.y
   (lambda (obj)
     (or (CTOK.punct? obj) (error "poly-attribute" 'punct 'y))
     (obj 'CTOK.punct.y)))
 (define CTOK.punct.filename
   (lambda (obj)
     (or (CTOK.punct? obj) (error "poly-attribute" 'punct 'filename))
     (obj 'CTOK.punct.filename)))



;;; key
 (define CTOK.AUTO
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.AUTO)
     (define AUTO
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((AUTO (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.AUTO)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.AUTO.x p:x)
            ('CTOK.AUTO.y p:y)
            ('CTOK.AUTO.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.AUTO.x))
            ('CTOK.key.y ((s s) 'CTOK.AUTO.y))
            ('CTOK.key.filename ((s s) 'CTOK.AUTO.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.AUTO.x (lambda (obj) (obj 'CTOK.AUTO.x)))
 (define CTOK.AUTO.y (lambda (obj) (obj 'CTOK.AUTO.y)))
 (define CTOK.AUTO.filename (lambda (obj) (obj 'CTOK.AUTO.filename)))
 (define CTOK.AUTO?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.AUTO))))

 (define CTOK.ENUM
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.ENUM)
     (define ENUM
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ENUM (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ENUM)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ENUM.x p:x)
            ('CTOK.ENUM.y p:y)
            ('CTOK.ENUM.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.ENUM.x))
            ('CTOK.key.y ((s s) 'CTOK.ENUM.y))
            ('CTOK.key.filename ((s s) 'CTOK.ENUM.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ENUM.x (lambda (obj) (obj 'CTOK.ENUM.x)))
 (define CTOK.ENUM.y (lambda (obj) (obj 'CTOK.ENUM.y)))
 (define CTOK.ENUM.filename (lambda (obj) (obj 'CTOK.ENUM.filename)))
 (define CTOK.ENUM?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ENUM))))

 (define CTOK.RESTRICT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.RESTRICT)
     (define RESTRICT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((RESTRICT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.RESTRICT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.RESTRICT.x p:x)
            ('CTOK.RESTRICT.y p:y)
            ('CTOK.RESTRICT.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.RESTRICT.x))
            ('CTOK.key.y ((s s) 'CTOK.RESTRICT.y))
            ('CTOK.key.filename ((s s) 'CTOK.RESTRICT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.RESTRICT.x (lambda (obj) (obj 'CTOK.RESTRICT.x)))
 (define CTOK.RESTRICT.y (lambda (obj) (obj 'CTOK.RESTRICT.y)))
 (define CTOK.RESTRICT.filename (lambda (obj) (obj 'CTOK.RESTRICT.filename)))
 (define CTOK.RESTRICT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.RESTRICT))))

 (define CTOK.UNSIGNED
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.UNSIGNED)
     (define UNSIGNED
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((UNSIGNED (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.UNSIGNED)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.UNSIGNED.x p:x)
            ('CTOK.UNSIGNED.y p:y)
            ('CTOK.UNSIGNED.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.UNSIGNED.x))
            ('CTOK.key.y ((s s) 'CTOK.UNSIGNED.y))
            ('CTOK.key.filename ((s s) 'CTOK.UNSIGNED.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.UNSIGNED.x (lambda (obj) (obj 'CTOK.UNSIGNED.x)))
 (define CTOK.UNSIGNED.y (lambda (obj) (obj 'CTOK.UNSIGNED.y)))
 (define CTOK.UNSIGNED.filename (lambda (obj) (obj 'CTOK.UNSIGNED.filename)))
 (define CTOK.UNSIGNED?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.UNSIGNED))))

 (define CTOK.BREAK
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.BREAK)
     (define BREAK
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((BREAK (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.BREAK)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.BREAK.x p:x)
            ('CTOK.BREAK.y p:y)
            ('CTOK.BREAK.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.BREAK.x))
            ('CTOK.key.y ((s s) 'CTOK.BREAK.y))
            ('CTOK.key.filename ((s s) 'CTOK.BREAK.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.BREAK.x (lambda (obj) (obj 'CTOK.BREAK.x)))
 (define CTOK.BREAK.y (lambda (obj) (obj 'CTOK.BREAK.y)))
 (define CTOK.BREAK.filename (lambda (obj) (obj 'CTOK.BREAK.filename)))
 (define CTOK.BREAK?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.BREAK))))

 (define CTOK.EXTERN
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.EXTERN)
     (define EXTERN
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((EXTERN (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.EXTERN)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.EXTERN.x p:x)
            ('CTOK.EXTERN.y p:y)
            ('CTOK.EXTERN.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.EXTERN.x))
            ('CTOK.key.y ((s s) 'CTOK.EXTERN.y))
            ('CTOK.key.filename ((s s) 'CTOK.EXTERN.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.EXTERN.x (lambda (obj) (obj 'CTOK.EXTERN.x)))
 (define CTOK.EXTERN.y (lambda (obj) (obj 'CTOK.EXTERN.y)))
 (define CTOK.EXTERN.filename (lambda (obj) (obj 'CTOK.EXTERN.filename)))
 (define CTOK.EXTERN?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.EXTERN))))

 (define CTOK.RETURN
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.RETURN)
     (define RETURN
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((RETURN (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.RETURN)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.RETURN.x p:x)
            ('CTOK.RETURN.y p:y)
            ('CTOK.RETURN.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.RETURN.x))
            ('CTOK.key.y ((s s) 'CTOK.RETURN.y))
            ('CTOK.key.filename ((s s) 'CTOK.RETURN.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.RETURN.x (lambda (obj) (obj 'CTOK.RETURN.x)))
 (define CTOK.RETURN.y (lambda (obj) (obj 'CTOK.RETURN.y)))
 (define CTOK.RETURN.filename (lambda (obj) (obj 'CTOK.RETURN.filename)))
 (define CTOK.RETURN?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.RETURN))))

 (define CTOK.VOID
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.VOID)
     (define VOID
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((VOID (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.VOID)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.VOID.x p:x)
            ('CTOK.VOID.y p:y)
            ('CTOK.VOID.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.VOID.x))
            ('CTOK.key.y ((s s) 'CTOK.VOID.y))
            ('CTOK.key.filename ((s s) 'CTOK.VOID.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.VOID.x (lambda (obj) (obj 'CTOK.VOID.x)))
 (define CTOK.VOID.y (lambda (obj) (obj 'CTOK.VOID.y)))
 (define CTOK.VOID.filename (lambda (obj) (obj 'CTOK.VOID.filename)))
 (define CTOK.VOID?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.VOID))))

 (define CTOK.CASE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.CASE)
     (define CASE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((CASE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.CASE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.CASE.x p:x)
            ('CTOK.CASE.y p:y)
            ('CTOK.CASE.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.CASE.x))
            ('CTOK.key.y ((s s) 'CTOK.CASE.y))
            ('CTOK.key.filename ((s s) 'CTOK.CASE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.CASE.x (lambda (obj) (obj 'CTOK.CASE.x)))
 (define CTOK.CASE.y (lambda (obj) (obj 'CTOK.CASE.y)))
 (define CTOK.CASE.filename (lambda (obj) (obj 'CTOK.CASE.filename)))
 (define CTOK.CASE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.CASE))))

 (define CTOK.SHORT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.SHORT)
     (define SHORT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((SHORT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.SHORT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.SHORT.x p:x)
            ('CTOK.SHORT.y p:y)
            ('CTOK.SHORT.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.SHORT.x))
            ('CTOK.key.y ((s s) 'CTOK.SHORT.y))
            ('CTOK.key.filename ((s s) 'CTOK.SHORT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.SHORT.x (lambda (obj) (obj 'CTOK.SHORT.x)))
 (define CTOK.SHORT.y (lambda (obj) (obj 'CTOK.SHORT.y)))
 (define CTOK.SHORT.filename (lambda (obj) (obj 'CTOK.SHORT.filename)))
 (define CTOK.SHORT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.SHORT))))

 (define CTOK.VOLATILE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.VOLATILE)
     (define VOLATILE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((VOLATILE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.VOLATILE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.VOLATILE.x p:x)
            ('CTOK.VOLATILE.y p:y)
            ('CTOK.VOLATILE.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.VOLATILE.x))
            ('CTOK.key.y ((s s) 'CTOK.VOLATILE.y))
            ('CTOK.key.filename ((s s) 'CTOK.VOLATILE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.VOLATILE.x (lambda (obj) (obj 'CTOK.VOLATILE.x)))
 (define CTOK.VOLATILE.y (lambda (obj) (obj 'CTOK.VOLATILE.y)))
 (define CTOK.VOLATILE.filename (lambda (obj) (obj 'CTOK.VOLATILE.filename)))
 (define CTOK.VOLATILE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.VOLATILE))))

 (define CTOK.FOR
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.FOR)
     (define FOR
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((FOR (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.FOR)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.FOR.x p:x)
            ('CTOK.FOR.y p:y)
            ('CTOK.FOR.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.FOR.x))
            ('CTOK.key.y ((s s) 'CTOK.FOR.y))
            ('CTOK.key.filename ((s s) 'CTOK.FOR.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.FOR.x (lambda (obj) (obj 'CTOK.FOR.x)))
 (define CTOK.FOR.y (lambda (obj) (obj 'CTOK.FOR.y)))
 (define CTOK.FOR.filename (lambda (obj) (obj 'CTOK.FOR.filename)))
 (define CTOK.FOR?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.FOR))))

 (define CTOK.SIGNED
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.SIGNED)
     (define SIGNED
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((SIGNED (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.SIGNED)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.SIGNED.x p:x)
            ('CTOK.SIGNED.y p:y)
            ('CTOK.SIGNED.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.SIGNED.x))
            ('CTOK.key.y ((s s) 'CTOK.SIGNED.y))
            ('CTOK.key.filename ((s s) 'CTOK.SIGNED.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.SIGNED.x (lambda (obj) (obj 'CTOK.SIGNED.x)))
 (define CTOK.SIGNED.y (lambda (obj) (obj 'CTOK.SIGNED.y)))
 (define CTOK.SIGNED.filename (lambda (obj) (obj 'CTOK.SIGNED.filename)))
 (define CTOK.SIGNED?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.SIGNED))))

 (define CTOK.WHILE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.WHILE)
     (define WHILE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((WHILE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.WHILE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.WHILE.x p:x)
            ('CTOK.WHILE.y p:y)
            ('CTOK.WHILE.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.WHILE.x))
            ('CTOK.key.y ((s s) 'CTOK.WHILE.y))
            ('CTOK.key.filename ((s s) 'CTOK.WHILE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.WHILE.x (lambda (obj) (obj 'CTOK.WHILE.x)))
 (define CTOK.WHILE.y (lambda (obj) (obj 'CTOK.WHILE.y)))
 (define CTOK.WHILE.filename (lambda (obj) (obj 'CTOK.WHILE.filename)))
 (define CTOK.WHILE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.WHILE))))

 (define CTOK.CONST
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.CONST)
     (define CONST
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((CONST (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.CONST)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.CONST.x p:x)
            ('CTOK.CONST.y p:y)
            ('CTOK.CONST.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.CONST.x))
            ('CTOK.key.y ((s s) 'CTOK.CONST.y))
            ('CTOK.key.filename ((s s) 'CTOK.CONST.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.CONST.x (lambda (obj) (obj 'CTOK.CONST.x)))
 (define CTOK.CONST.y (lambda (obj) (obj 'CTOK.CONST.y)))
 (define CTOK.CONST.filename (lambda (obj) (obj 'CTOK.CONST.filename)))
 (define CTOK.CONST?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.CONST))))

 (define CTOK.GOTO
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.GOTO)
     (define GOTO
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((GOTO (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.GOTO)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.GOTO.x p:x)
            ('CTOK.GOTO.y p:y)
            ('CTOK.GOTO.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.GOTO.x))
            ('CTOK.key.y ((s s) 'CTOK.GOTO.y))
            ('CTOK.key.filename ((s s) 'CTOK.GOTO.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.GOTO.x (lambda (obj) (obj 'CTOK.GOTO.x)))
 (define CTOK.GOTO.y (lambda (obj) (obj 'CTOK.GOTO.y)))
 (define CTOK.GOTO.filename (lambda (obj) (obj 'CTOK.GOTO.filename)))
 (define CTOK.GOTO?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.GOTO))))

 (define CTOK.SIZEOF
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.SIZEOF)
     (define SIZEOF
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((SIZEOF (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.SIZEOF)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.SIZEOF.x p:x)
            ('CTOK.SIZEOF.y p:y)
            ('CTOK.SIZEOF.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.SIZEOF.x))
            ('CTOK.key.y ((s s) 'CTOK.SIZEOF.y))
            ('CTOK.key.filename ((s s) 'CTOK.SIZEOF.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.SIZEOF.x (lambda (obj) (obj 'CTOK.SIZEOF.x)))
 (define CTOK.SIZEOF.y (lambda (obj) (obj 'CTOK.SIZEOF.y)))
 (define CTOK.SIZEOF.filename (lambda (obj) (obj 'CTOK.SIZEOF.filename)))
 (define CTOK.SIZEOF?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.SIZEOF))))

 (define CTOK.CONTINUE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.CONTINUE)
     (define CONTINUE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((CONTINUE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.CONTINUE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.CONTINUE.x p:x)
            ('CTOK.CONTINUE.y p:y)
            ('CTOK.CONTINUE.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.CONTINUE.x))
            ('CTOK.key.y ((s s) 'CTOK.CONTINUE.y))
            ('CTOK.key.filename ((s s) 'CTOK.CONTINUE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.CONTINUE.x (lambda (obj) (obj 'CTOK.CONTINUE.x)))
 (define CTOK.CONTINUE.y (lambda (obj) (obj 'CTOK.CONTINUE.y)))
 (define CTOK.CONTINUE.filename (lambda (obj) (obj 'CTOK.CONTINUE.filename)))
 (define CTOK.CONTINUE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.CONTINUE))))

 (define CTOK.IF
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.IF)
     (define IF
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((IF (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.IF)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.IF.x p:x)
            ('CTOK.IF.y p:y)
            ('CTOK.IF.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.IF.x))
            ('CTOK.key.y ((s s) 'CTOK.IF.y))
            ('CTOK.key.filename ((s s) 'CTOK.IF.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.IF.x (lambda (obj) (obj 'CTOK.IF.x)))
 (define CTOK.IF.y (lambda (obj) (obj 'CTOK.IF.y)))
 (define CTOK.IF.filename (lambda (obj) (obj 'CTOK.IF.filename)))
 (define CTOK.IF?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.IF))))

 (define CTOK.STATIC
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.STATIC)
     (define STATIC
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((STATIC (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.STATIC)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.STATIC.x p:x)
            ('CTOK.STATIC.y p:y)
            ('CTOK.STATIC.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.STATIC.x))
            ('CTOK.key.y ((s s) 'CTOK.STATIC.y))
            ('CTOK.key.filename ((s s) 'CTOK.STATIC.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.STATIC.x (lambda (obj) (obj 'CTOK.STATIC.x)))
 (define CTOK.STATIC.y (lambda (obj) (obj 'CTOK.STATIC.y)))
 (define CTOK.STATIC.filename (lambda (obj) (obj 'CTOK.STATIC.filename)))
 (define CTOK.STATIC?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.STATIC))))

 (define CTOK.DEFAULT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.DEFAULT)
     (define DEFAULT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((DEFAULT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.DEFAULT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.DEFAULT.x p:x)
            ('CTOK.DEFAULT.y p:y)
            ('CTOK.DEFAULT.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.DEFAULT.x))
            ('CTOK.key.y ((s s) 'CTOK.DEFAULT.y))
            ('CTOK.key.filename ((s s) 'CTOK.DEFAULT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.DEFAULT.x (lambda (obj) (obj 'CTOK.DEFAULT.x)))
 (define CTOK.DEFAULT.y (lambda (obj) (obj 'CTOK.DEFAULT.y)))
 (define CTOK.DEFAULT.filename (lambda (obj) (obj 'CTOK.DEFAULT.filename)))
 (define CTOK.DEFAULT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.DEFAULT))))

 (define CTOK.INLINE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.INLINE)
     (define INLINE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((INLINE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.INLINE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.INLINE.x p:x)
            ('CTOK.INLINE.y p:y)
            ('CTOK.INLINE.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.INLINE.x))
            ('CTOK.key.y ((s s) 'CTOK.INLINE.y))
            ('CTOK.key.filename ((s s) 'CTOK.INLINE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.INLINE.x (lambda (obj) (obj 'CTOK.INLINE.x)))
 (define CTOK.INLINE.y (lambda (obj) (obj 'CTOK.INLINE.y)))
 (define CTOK.INLINE.filename (lambda (obj) (obj 'CTOK.INLINE.filename)))
 (define CTOK.INLINE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.INLINE))))

 (define CTOK.STRUCT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.STRUCT)
     (define STRUCT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((STRUCT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.STRUCT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.STRUCT.x p:x)
            ('CTOK.STRUCT.y p:y)
            ('CTOK.STRUCT.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.STRUCT.x))
            ('CTOK.key.y ((s s) 'CTOK.STRUCT.y))
            ('CTOK.key.filename ((s s) 'CTOK.STRUCT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.STRUCT.x (lambda (obj) (obj 'CTOK.STRUCT.x)))
 (define CTOK.STRUCT.y (lambda (obj) (obj 'CTOK.STRUCT.y)))
 (define CTOK.STRUCT.filename (lambda (obj) (obj 'CTOK.STRUCT.filename)))
 (define CTOK.STRUCT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.STRUCT))))

 (define CTOK.DO
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.DO)
     (define DO
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((DO (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.DO)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.DO.x p:x)
            ('CTOK.DO.y p:y)
            ('CTOK.DO.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.DO.x))
            ('CTOK.key.y ((s s) 'CTOK.DO.y))
            ('CTOK.key.filename ((s s) 'CTOK.DO.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.DO.x (lambda (obj) (obj 'CTOK.DO.x)))
 (define CTOK.DO.y (lambda (obj) (obj 'CTOK.DO.y)))
 (define CTOK.DO.filename (lambda (obj) (obj 'CTOK.DO.filename)))
 (define CTOK.DO?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.DO))))

 (define CTOK.INT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.INT)
     (define INT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((INT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.INT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.INT.x p:x)
            ('CTOK.INT.y p:y)
            ('CTOK.INT.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.INT.x))
            ('CTOK.key.y ((s s) 'CTOK.INT.y))
            ('CTOK.key.filename ((s s) 'CTOK.INT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.INT.x (lambda (obj) (obj 'CTOK.INT.x)))
 (define CTOK.INT.y (lambda (obj) (obj 'CTOK.INT.y)))
 (define CTOK.INT.filename (lambda (obj) (obj 'CTOK.INT.filename)))
 (define CTOK.INT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.INT))))

 (define CTOK.SWITCH
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.SWITCH)
     (define SWITCH
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((SWITCH (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.SWITCH)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.SWITCH.x p:x)
            ('CTOK.SWITCH.y p:y)
            ('CTOK.SWITCH.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.SWITCH.x))
            ('CTOK.key.y ((s s) 'CTOK.SWITCH.y))
            ('CTOK.key.filename ((s s) 'CTOK.SWITCH.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.SWITCH.x (lambda (obj) (obj 'CTOK.SWITCH.x)))
 (define CTOK.SWITCH.y (lambda (obj) (obj 'CTOK.SWITCH.y)))
 (define CTOK.SWITCH.filename (lambda (obj) (obj 'CTOK.SWITCH.filename)))
 (define CTOK.SWITCH?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.SWITCH))))

 (define CTOK.DOUBLE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.DOUBLE)
     (define DOUBLE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((DOUBLE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.DOUBLE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.DOUBLE.x p:x)
            ('CTOK.DOUBLE.y p:y)
            ('CTOK.DOUBLE.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.DOUBLE.x))
            ('CTOK.key.y ((s s) 'CTOK.DOUBLE.y))
            ('CTOK.key.filename ((s s) 'CTOK.DOUBLE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.DOUBLE.x (lambda (obj) (obj 'CTOK.DOUBLE.x)))
 (define CTOK.DOUBLE.y (lambda (obj) (obj 'CTOK.DOUBLE.y)))
 (define CTOK.DOUBLE.filename (lambda (obj) (obj 'CTOK.DOUBLE.filename)))
 (define CTOK.DOUBLE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.DOUBLE))))

 (define CTOK.LONG
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.LONG)
     (define LONG
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((LONG (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.LONG)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.LONG.x p:x)
            ('CTOK.LONG.y p:y)
            ('CTOK.LONG.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.LONG.x))
            ('CTOK.key.y ((s s) 'CTOK.LONG.y))
            ('CTOK.key.filename ((s s) 'CTOK.LONG.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.LONG.x (lambda (obj) (obj 'CTOK.LONG.x)))
 (define CTOK.LONG.y (lambda (obj) (obj 'CTOK.LONG.y)))
 (define CTOK.LONG.filename (lambda (obj) (obj 'CTOK.LONG.filename)))
 (define CTOK.LONG?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.LONG))))

 (define CTOK.TYPEDEF
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.TYPEDEF)
     (define TYPEDEF
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((TYPEDEF (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.TYPEDEF)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.TYPEDEF.x p:x)
            ('CTOK.TYPEDEF.y p:y)
            ('CTOK.TYPEDEF.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.TYPEDEF.x))
            ('CTOK.key.y ((s s) 'CTOK.TYPEDEF.y))
            ('CTOK.key.filename ((s s) 'CTOK.TYPEDEF.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.TYPEDEF.x (lambda (obj) (obj 'CTOK.TYPEDEF.x)))
 (define CTOK.TYPEDEF.y (lambda (obj) (obj 'CTOK.TYPEDEF.y)))
 (define CTOK.TYPEDEF.filename (lambda (obj) (obj 'CTOK.TYPEDEF.filename)))
 (define CTOK.TYPEDEF?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.TYPEDEF))))

 (define CTOK.ELSE
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.ELSE)
     (define ELSE
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((ELSE (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.ELSE)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.ELSE.x p:x)
            ('CTOK.ELSE.y p:y)
            ('CTOK.ELSE.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.ELSE.x))
            ('CTOK.key.y ((s s) 'CTOK.ELSE.y))
            ('CTOK.key.filename ((s s) 'CTOK.ELSE.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.ELSE.x (lambda (obj) (obj 'CTOK.ELSE.x)))
 (define CTOK.ELSE.y (lambda (obj) (obj 'CTOK.ELSE.y)))
 (define CTOK.ELSE.filename (lambda (obj) (obj 'CTOK.ELSE.filename)))
 (define CTOK.ELSE?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.ELSE))))

 (define CTOK.REGISTER
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.REGISTER)
     (define REGISTER
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((REGISTER (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.REGISTER)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.REGISTER.x p:x)
            ('CTOK.REGISTER.y p:y)
            ('CTOK.REGISTER.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.REGISTER.x))
            ('CTOK.key.y ((s s) 'CTOK.REGISTER.y))
            ('CTOK.key.filename ((s s) 'CTOK.REGISTER.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.REGISTER.x (lambda (obj) (obj 'CTOK.REGISTER.x)))
 (define CTOK.REGISTER.y (lambda (obj) (obj 'CTOK.REGISTER.y)))
 (define CTOK.REGISTER.filename (lambda (obj) (obj 'CTOK.REGISTER.filename)))
 (define CTOK.REGISTER?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.REGISTER))))

 (define CTOK.UNION
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.UNION)
     (define UNION
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((UNION (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.UNION)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.UNION.x p:x)
            ('CTOK.UNION.y p:y)
            ('CTOK.UNION.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.UNION.x))
            ('CTOK.key.y ((s s) 'CTOK.UNION.y))
            ('CTOK.key.filename ((s s) 'CTOK.UNION.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.UNION.x (lambda (obj) (obj 'CTOK.UNION.x)))
 (define CTOK.UNION.y (lambda (obj) (obj 'CTOK.UNION.y)))
 (define CTOK.UNION.filename (lambda (obj) (obj 'CTOK.UNION.filename)))
 (define CTOK.UNION?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.UNION))))

 (define CTOK.CHAR
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.CHAR)
     (define CHAR
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((CHAR (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.CHAR)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.CHAR.x p:x)
            ('CTOK.CHAR.y p:y)
            ('CTOK.CHAR.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.CHAR.x))
            ('CTOK.key.y ((s s) 'CTOK.CHAR.y))
            ('CTOK.key.filename ((s s) 'CTOK.CHAR.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.CHAR.x (lambda (obj) (obj 'CTOK.CHAR.x)))
 (define CTOK.CHAR.y (lambda (obj) (obj 'CTOK.CHAR.y)))
 (define CTOK.CHAR.filename (lambda (obj) (obj 'CTOK.CHAR.filename)))
 (define CTOK.CHAR?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.CHAR))))

 (define CTOK.FLOAT
   (lambda (p:x p:y p:filename)
     (define @TYPE 'key)
     (define @KONS 'CTOK.FLOAT)
     (define FLOAT
       (lambda (self)
         (lambda (p:x p:y p:filename)
           (begin
             (tree-type-check self ROOT.integer? p:x)
             (tree-type-check self ROOT.integer? p:y)
             (tree-type-check self ROOT.bottom? p:filename))
           self)))
     (define $is-a? (lambda (self) (lambda (T) (eq? T @TYPE))))
     (define $kons? (lambda (self) (lambda (x) (eq? x @KONS))))
     (define $tree
       (lambda (self) (cons @KONS (map tree-repr (list p:x p:y p:filename)))))
     ((lambda (self) ((FLOAT (self self)) p:x p:y p:filename))
      (lambda (s)
        (lambda (m)
          (case m
            ('CONSID 'CTOK.FLOAT)
            ('TYCK ($is-a? (s s)))
            ('TREE ($tree (s s)))
            ('CONSCK ($kons? (s s)))
            ('CTOK.FLOAT.x p:x)
            ('CTOK.FLOAT.y p:y)
            ('CTOK.FLOAT.filename p:filename)
            ('CTOK.key.x ((s s) 'CTOK.FLOAT.x))
            ('CTOK.key.y ((s s) 'CTOK.FLOAT.y))
            ('CTOK.key.filename ((s s) 'CTOK.FLOAT.filename))
            (else (error "unknown messagse sent to" @KONS ":" m))))))))
 (define CTOK.FLOAT.x (lambda (obj) (obj 'CTOK.FLOAT.x)))
 (define CTOK.FLOAT.y (lambda (obj) (obj 'CTOK.FLOAT.y)))
 (define CTOK.FLOAT.filename (lambda (obj) (obj 'CTOK.FLOAT.filename)))
 (define CTOK.FLOAT?
   (lambda (obj) (and (is/sum/type? obj) ((obj 'CONSCK) 'CTOK.FLOAT))))

 (define CTOK.key?
   (lambda (obj) (and (is/sum/type? obj) (procedure? obj) ((obj 'TYCK) 'key))))
;;; selectors for polymorphic attributes
 (define CTOK.key.x
   (lambda (obj)
     (or (CTOK.key? obj) (error "poly-attribute" 'key 'x))
     (obj 'CTOK.key.x)))
 (define CTOK.key.y
   (lambda (obj)
     (or (CTOK.key? obj) (error "poly-attribute" 'key 'y))
     (obj 'CTOK.key.y)))
 (define CTOK.key.filename
   (lambda (obj)
     (or (CTOK.key? obj) (error "poly-attribute" 'key 'filename))
     (obj 'CTOK.key.filename)))


