;; -*- mode:scheme ; buffer-read-only:t -*-

;; TREE OP -- this file was automatically generated by asdlgen

;;; kernelop
(define OP.CONCAT (lambda (data) (list (quote CONCAT) data)))
(define OP.CONCAT? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote CONCAT)))))

(define OP.UNION (lambda (data) (list (quote UNION) data)))
(define OP.UNION? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote UNION)))))

(define OP.KLEENE (lambda (re) (list (quote KLEENE) re)))
(define OP.KLEENE? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote KLEENE)))))

(define OP.SEND (lambda (msg re) (list (quote SEND) msg re)))
(define OP.SEND? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote SEND)))))

(define OP.BOL (lambda (re) (list (quote BOL) re)))
(define OP.BOL? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote BOL)))))



;;; op
(define OP.INTERVAL (lambda (from to) (list (quote INTERVAL) from to)))
(define OP.INTERVAL? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote INTERVAL)))))

(define OP.COMPLEMENT (lambda (re) (list (quote COMPLEMENT) re)))
(define OP.COMPLEMENT? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote COMPLEMENT)))))

(define OP.OPT (lambda (re) (list (quote OPT) re)))
(define OP.OPT? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote OPT)))))

(define OP.REPEAT (lambda (times1 times2 re) (list (quote REPEAT) times1 times2 re)))
(define OP.REPEAT? (lambda (obj) (and (cons? obj) (eq? (car obj) (quote REPEAT)))))

(define OP.ANY (quote ANY))
(define OP.ANY? (lambda (obj) (eq? obj (quote ANY))))


