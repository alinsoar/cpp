;; -*- mode:scheme ; buffer-read-only:t -*-
;;; this file was autogenerated by asdlgen

(define :PPTRIE.pptok.DEFINED (pptrie.insert-string .DEFINED))
(define :PPTRIE.pptok.STRINGIZE (pptrie.insert-string .STRINGIZE))
(define :PPTRIE.pptok.CONCATENATION (pptrie.insert-string .CONCATENATION))
(define :PPTRIE.pptok.ZERO (pptrie.insert-string .ZERO))
(define :PPTRIE.pptok.ONE (pptrie.insert-string .ONE))
(define :PPTRIE.pptok.TIME__ (pptrie.insert-string .TIME__))
(define :PPTRIE.pptok.DATE__ (pptrie.insert-string .DATE__))
(define :PPTRIE.pptok.FILE__ (pptrie.insert-string .FILE__))
(define :PPTRIE.pptok.LINE__ (pptrie.insert-string .LINE__))
(define :PPTRIE.pptok.VA_ARGS__ (pptrie.insert-string .VA_ARGS__))
(define :PPTRIE.pptok.HASHTAG (pptrie.insert-string .HASHTAG))
(define :PPTRIE.key.AUTO (pptrie.insert-string .AUTO))
(define :PPTRIE.key.ENUM (pptrie.insert-string .ENUM))
(define :PPTRIE.key.RESTRICT (pptrie.insert-string .RESTRICT))
(define :PPTRIE.key.UNSIGNED (pptrie.insert-string .UNSIGNED))
(define :PPTRIE.key.BREAK (pptrie.insert-string .BREAK))
(define :PPTRIE.key.EXTERN (pptrie.insert-string .EXTERN))
(define :PPTRIE.key.RETURN (pptrie.insert-string .RETURN))
(define :PPTRIE.key.VOID (pptrie.insert-string .VOID))
(define :PPTRIE.key.CASE (pptrie.insert-string .CASE))
(define :PPTRIE.key.FLOAT (pptrie.insert-string .FLOAT))
(define :PPTRIE.key.SHORT (pptrie.insert-string .SHORT))
(define :PPTRIE.key.VOLATILE (pptrie.insert-string .VOLATILE))
(define :PPTRIE.key.CHAR (pptrie.insert-string .CHAR))
(define :PPTRIE.key.FOR (pptrie.insert-string .FOR))
(define :PPTRIE.key.SIGNED (pptrie.insert-string .SIGNED))
(define :PPTRIE.key.WHILE (pptrie.insert-string .WHILE))
(define :PPTRIE.key.CONST (pptrie.insert-string .CONST))
(define :PPTRIE.key.GOTO (pptrie.insert-string .GOTO))
(define :PPTRIE.key.SIZEOF (pptrie.insert-string .SIZEOF))
(define :PPTRIE.key.CONTINUE (pptrie.insert-string .CONTINUE))
(define :PPTRIE.key.IF (pptrie.insert-string .IF))
(define :PPTRIE.key.STATIC (pptrie.insert-string .STATIC))
(define :PPTRIE.key.DEFAULT (pptrie.insert-string .DEFAULT))
(define :PPTRIE.key.INLINE (pptrie.insert-string .INLINE))
(define :PPTRIE.key.STRUCT (pptrie.insert-string .STRUCT))
(define :PPTRIE.key.DO (pptrie.insert-string .DO))
(define :PPTRIE.key.INT (pptrie.insert-string .INT))
(define :PPTRIE.key.SWITCH (pptrie.insert-string .SWITCH))
(define :PPTRIE.key.DOUBLE (pptrie.insert-string .DOUBLE))
(define :PPTRIE.key.LONG (pptrie.insert-string .LONG))
(define :PPTRIE.key.TYPEDEF (pptrie.insert-string .TYPEDEF))
(define :PPTRIE.key.ELSE (pptrie.insert-string .ELSE))
(define :PPTRIE.key.REGISTER (pptrie.insert-string .REGISTER))
(define :PPTRIE.key.UNION (pptrie.insert-string .UNION))
(define :PPTRIE.punct.COMMA (pptrie.insert-string .COMMA))
(define :PPTRIE.punct.COLON (pptrie.insert-string .COLON))
(define :PPTRIE.punct.SEMICOLON (pptrie.insert-string .SEMICOLON))
(define :PPTRIE.punct.ELLIPSIS (pptrie.insert-string .ELLIPSIS))
(define :PPTRIE.punct.OPEN_BRACKET (pptrie.insert-string .OPEN_BRACKET))
(define :PPTRIE.punct.CLOSE_BRACKET (pptrie.insert-string .CLOSE_BRACKET))
(define :PPTRIE.punct.OPEN_BRACE (pptrie.insert-string .OPEN_BRACE))
(define :PPTRIE.punct.CLOSE_BRACE (pptrie.insert-string .CLOSE_BRACE))
(define :PPTRIE.punct.OPEN_PAREN (pptrie.insert-string .OPEN_PAREN))
(define :PPTRIE.punct.CLOSE_PAREN (pptrie.insert-string .CLOSE_PAREN))
(define :PPTRIE.punct.QUESTION (pptrie.insert-string .QUESTION))
(define :PPTRIE.punct.LOGOR (pptrie.insert-string .LOGOR))
(define :PPTRIE.punct.LOGAND (pptrie.insert-string .LOGAND))
(define :PPTRIE.punct.LOGNOT (pptrie.insert-string .LOGNOT))
(define :PPTRIE.punct.INCLUSIVE_OR (pptrie.insert-string .INCLUSIVE_OR))
(define :PPTRIE.punct.EXCLUSIVE_OR (pptrie.insert-string .EXCLUSIVE_OR))
(define :PPTRIE.punct.AND (pptrie.insert-string .AND))
(define :PPTRIE.punct.NOT (pptrie.insert-string .NOT))
(define :PPTRIE.punct.EQUAL (pptrie.insert-string .EQUAL))
(define :PPTRIE.punct.DIFFERENT (pptrie.insert-string .DIFFERENT))
(define :PPTRIE.punct.LESS_THAN (pptrie.insert-string .LESS_THAN))
(define :PPTRIE.punct.GREATER_THAN (pptrie.insert-string .GREATER_THAN))
(define :PPTRIE.punct.LESS_OR_EQUAL (pptrie.insert-string .LESS_OR_EQUAL))
(define :PPTRIE.punct.GREATER_OR_EQUAL (pptrie.insert-string .GREATER_OR_EQUAL))
(define :PPTRIE.punct.ASTERISK (pptrie.insert-string .ASTERISK))
(define :PPTRIE.punct.DIVISION (pptrie.insert-string .DIVISION))
(define :PPTRIE.punct.REMAINDER (pptrie.insert-string .REMAINDER))
(define :PPTRIE.punct.ADDITION (pptrie.insert-string .ADDITION))
(define :PPTRIE.punct.SUBTRACTION (pptrie.insert-string .SUBTRACTION))
(define :PPTRIE.punct.SHIFT_LEFT (pptrie.insert-string .SHIFT_LEFT))
(define :PPTRIE.punct.SHIFT_RIGHT (pptrie.insert-string .SHIFT_RIGHT))
(define :PPTRIE.punct.DOT (pptrie.insert-string .DOT))
(define :PPTRIE.punct.ARROW (pptrie.insert-string .ARROW))
(define :PPTRIE.punct.INCREMENTER (pptrie.insert-string .INCREMENTER))
(define :PPTRIE.punct.DECREMENTER (pptrie.insert-string .DECREMENTER))
(define :PPTRIE.punct.ASSIGN (pptrie.insert-string .ASSIGN))
(define :PPTRIE.punct.ASSIGN_MUL (pptrie.insert-string .ASSIGN_MUL))
(define :PPTRIE.punct.ASSIGN_DIV (pptrie.insert-string .ASSIGN_DIV))
(define :PPTRIE.punct.ASSIGN_REM (pptrie.insert-string .ASSIGN_REM))
(define :PPTRIE.punct.ASSIGN_ADD (pptrie.insert-string .ASSIGN_ADD))
(define :PPTRIE.punct.ASSIGN_SUB (pptrie.insert-string .ASSIGN_SUB))
(define :PPTRIE.punct.ASSIGN_SHL (pptrie.insert-string .ASSIGN_SHL))
(define :PPTRIE.punct.ASSIGN_SHR (pptrie.insert-string .ASSIGN_SHR))
(define :PPTRIE.punct.ASSIGN_AND (pptrie.insert-string .ASSIGN_AND))
(define :PPTRIE.punct.ASSIGN_XOR (pptrie.insert-string .ASSIGN_XOR))
(define :PPTRIE.punct.ASSIGN_IOR (pptrie.insert-string .ASSIGN_IOR))

(define :PPTRIE.pptok.DEFINED? (lambda (k) (= k :PPTRIE.pptok.DEFINED)))
(define :PPTRIE.pptok.STRINGIZE? (lambda (k) (= k :PPTRIE.pptok.STRINGIZE)))
(define :PPTRIE.pptok.CONCATENATION? (lambda (k) (= k :PPTRIE.pptok.CONCATENATION)))
(define :PPTRIE.pptok.ZERO? (lambda (k) (= k :PPTRIE.pptok.ZERO)))
(define :PPTRIE.pptok.ONE? (lambda (k) (= k :PPTRIE.pptok.ONE)))
(define :PPTRIE.pptok.TIME__? (lambda (k) (= k :PPTRIE.pptok.TIME__)))
(define :PPTRIE.pptok.DATE__? (lambda (k) (= k :PPTRIE.pptok.DATE__)))
(define :PPTRIE.pptok.FILE__? (lambda (k) (= k :PPTRIE.pptok.FILE__)))
(define :PPTRIE.pptok.LINE__? (lambda (k) (= k :PPTRIE.pptok.LINE__)))
(define :PPTRIE.pptok.VA_ARGS__? (lambda (k) (= k :PPTRIE.pptok.VA_ARGS__)))
(define :PPTRIE.pptok.HASHTAG? (lambda (k) (= k :PPTRIE.pptok.HASHTAG)))
(define :PPTRIE.key.AUTO? (lambda (k) (= k :PPTRIE.key.AUTO)))
(define :PPTRIE.key.ENUM? (lambda (k) (= k :PPTRIE.key.ENUM)))
(define :PPTRIE.key.RESTRICT? (lambda (k) (= k :PPTRIE.key.RESTRICT)))
(define :PPTRIE.key.UNSIGNED? (lambda (k) (= k :PPTRIE.key.UNSIGNED)))
(define :PPTRIE.key.BREAK? (lambda (k) (= k :PPTRIE.key.BREAK)))
(define :PPTRIE.key.EXTERN? (lambda (k) (= k :PPTRIE.key.EXTERN)))
(define :PPTRIE.key.RETURN? (lambda (k) (= k :PPTRIE.key.RETURN)))
(define :PPTRIE.key.VOID? (lambda (k) (= k :PPTRIE.key.VOID)))
(define :PPTRIE.key.CASE? (lambda (k) (= k :PPTRIE.key.CASE)))
(define :PPTRIE.key.FLOAT? (lambda (k) (= k :PPTRIE.key.FLOAT)))
(define :PPTRIE.key.SHORT? (lambda (k) (= k :PPTRIE.key.SHORT)))
(define :PPTRIE.key.VOLATILE? (lambda (k) (= k :PPTRIE.key.VOLATILE)))
(define :PPTRIE.key.CHAR? (lambda (k) (= k :PPTRIE.key.CHAR)))
(define :PPTRIE.key.FOR? (lambda (k) (= k :PPTRIE.key.FOR)))
(define :PPTRIE.key.SIGNED? (lambda (k) (= k :PPTRIE.key.SIGNED)))
(define :PPTRIE.key.WHILE? (lambda (k) (= k :PPTRIE.key.WHILE)))
(define :PPTRIE.key.CONST? (lambda (k) (= k :PPTRIE.key.CONST)))
(define :PPTRIE.key.GOTO? (lambda (k) (= k :PPTRIE.key.GOTO)))
(define :PPTRIE.key.SIZEOF? (lambda (k) (= k :PPTRIE.key.SIZEOF)))
(define :PPTRIE.key.CONTINUE? (lambda (k) (= k :PPTRIE.key.CONTINUE)))
(define :PPTRIE.key.IF? (lambda (k) (= k :PPTRIE.key.IF)))
(define :PPTRIE.key.STATIC? (lambda (k) (= k :PPTRIE.key.STATIC)))
(define :PPTRIE.key.DEFAULT? (lambda (k) (= k :PPTRIE.key.DEFAULT)))
(define :PPTRIE.key.INLINE? (lambda (k) (= k :PPTRIE.key.INLINE)))
(define :PPTRIE.key.STRUCT? (lambda (k) (= k :PPTRIE.key.STRUCT)))
(define :PPTRIE.key.DO? (lambda (k) (= k :PPTRIE.key.DO)))
(define :PPTRIE.key.INT? (lambda (k) (= k :PPTRIE.key.INT)))
(define :PPTRIE.key.SWITCH? (lambda (k) (= k :PPTRIE.key.SWITCH)))
(define :PPTRIE.key.DOUBLE? (lambda (k) (= k :PPTRIE.key.DOUBLE)))
(define :PPTRIE.key.LONG? (lambda (k) (= k :PPTRIE.key.LONG)))
(define :PPTRIE.key.TYPEDEF? (lambda (k) (= k :PPTRIE.key.TYPEDEF)))
(define :PPTRIE.key.ELSE? (lambda (k) (= k :PPTRIE.key.ELSE)))
(define :PPTRIE.key.REGISTER? (lambda (k) (= k :PPTRIE.key.REGISTER)))
(define :PPTRIE.key.UNION? (lambda (k) (= k :PPTRIE.key.UNION)))
(define :PPTRIE.punct.COMMA? (lambda (k) (= k :PPTRIE.punct.COMMA)))
(define :PPTRIE.punct.COLON? (lambda (k) (= k :PPTRIE.punct.COLON)))
(define :PPTRIE.punct.SEMICOLON? (lambda (k) (= k :PPTRIE.punct.SEMICOLON)))
(define :PPTRIE.punct.ELLIPSIS? (lambda (k) (= k :PPTRIE.punct.ELLIPSIS)))
(define :PPTRIE.punct.OPEN_BRACKET? (lambda (k) (= k :PPTRIE.punct.OPEN_BRACKET)))
(define :PPTRIE.punct.CLOSE_BRACKET? (lambda (k) (= k :PPTRIE.punct.CLOSE_BRACKET)))
(define :PPTRIE.punct.OPEN_BRACE? (lambda (k) (= k :PPTRIE.punct.OPEN_BRACE)))
(define :PPTRIE.punct.CLOSE_BRACE? (lambda (k) (= k :PPTRIE.punct.CLOSE_BRACE)))
(define :PPTRIE.punct.OPEN_PAREN? (lambda (k) (= k :PPTRIE.punct.OPEN_PAREN)))
(define :PPTRIE.punct.CLOSE_PAREN? (lambda (k) (= k :PPTRIE.punct.CLOSE_PAREN)))
(define :PPTRIE.punct.QUESTION? (lambda (k) (= k :PPTRIE.punct.QUESTION)))
(define :PPTRIE.punct.LOGOR? (lambda (k) (= k :PPTRIE.punct.LOGOR)))
(define :PPTRIE.punct.LOGAND? (lambda (k) (= k :PPTRIE.punct.LOGAND)))
(define :PPTRIE.punct.LOGNOT? (lambda (k) (= k :PPTRIE.punct.LOGNOT)))
(define :PPTRIE.punct.INCLUSIVE_OR? (lambda (k) (= k :PPTRIE.punct.INCLUSIVE_OR)))
(define :PPTRIE.punct.EXCLUSIVE_OR? (lambda (k) (= k :PPTRIE.punct.EXCLUSIVE_OR)))
(define :PPTRIE.punct.AND? (lambda (k) (= k :PPTRIE.punct.AND)))
(define :PPTRIE.punct.NOT? (lambda (k) (= k :PPTRIE.punct.NOT)))
(define :PPTRIE.punct.EQUAL? (lambda (k) (= k :PPTRIE.punct.EQUAL)))
(define :PPTRIE.punct.DIFFERENT? (lambda (k) (= k :PPTRIE.punct.DIFFERENT)))
(define :PPTRIE.punct.LESS_THAN? (lambda (k) (= k :PPTRIE.punct.LESS_THAN)))
(define :PPTRIE.punct.GREATER_THAN? (lambda (k) (= k :PPTRIE.punct.GREATER_THAN)))
(define :PPTRIE.punct.LESS_OR_EQUAL? (lambda (k) (= k :PPTRIE.punct.LESS_OR_EQUAL)))
(define :PPTRIE.punct.GREATER_OR_EQUAL? (lambda (k) (= k :PPTRIE.punct.GREATER_OR_EQUAL)))
(define :PPTRIE.punct.ASTERISK? (lambda (k) (= k :PPTRIE.punct.ASTERISK)))
(define :PPTRIE.punct.DIVISION? (lambda (k) (= k :PPTRIE.punct.DIVISION)))
(define :PPTRIE.punct.REMAINDER? (lambda (k) (= k :PPTRIE.punct.REMAINDER)))
(define :PPTRIE.punct.ADDITION? (lambda (k) (= k :PPTRIE.punct.ADDITION)))
(define :PPTRIE.punct.SUBTRACTION? (lambda (k) (= k :PPTRIE.punct.SUBTRACTION)))
(define :PPTRIE.punct.SHIFT_LEFT? (lambda (k) (= k :PPTRIE.punct.SHIFT_LEFT)))
(define :PPTRIE.punct.SHIFT_RIGHT? (lambda (k) (= k :PPTRIE.punct.SHIFT_RIGHT)))
(define :PPTRIE.punct.DOT? (lambda (k) (= k :PPTRIE.punct.DOT)))
(define :PPTRIE.punct.ARROW? (lambda (k) (= k :PPTRIE.punct.ARROW)))
(define :PPTRIE.punct.INCREMENTER? (lambda (k) (= k :PPTRIE.punct.INCREMENTER)))
(define :PPTRIE.punct.DECREMENTER? (lambda (k) (= k :PPTRIE.punct.DECREMENTER)))
(define :PPTRIE.punct.ASSIGN? (lambda (k) (= k :PPTRIE.punct.ASSIGN)))
(define :PPTRIE.punct.ASSIGN_MUL? (lambda (k) (= k :PPTRIE.punct.ASSIGN_MUL)))
(define :PPTRIE.punct.ASSIGN_DIV? (lambda (k) (= k :PPTRIE.punct.ASSIGN_DIV)))
(define :PPTRIE.punct.ASSIGN_REM? (lambda (k) (= k :PPTRIE.punct.ASSIGN_REM)))
(define :PPTRIE.punct.ASSIGN_ADD? (lambda (k) (= k :PPTRIE.punct.ASSIGN_ADD)))
(define :PPTRIE.punct.ASSIGN_SUB? (lambda (k) (= k :PPTRIE.punct.ASSIGN_SUB)))
(define :PPTRIE.punct.ASSIGN_SHL? (lambda (k) (= k :PPTRIE.punct.ASSIGN_SHL)))
(define :PPTRIE.punct.ASSIGN_SHR? (lambda (k) (= k :PPTRIE.punct.ASSIGN_SHR)))
(define :PPTRIE.punct.ASSIGN_AND? (lambda (k) (= k :PPTRIE.punct.ASSIGN_AND)))
(define :PPTRIE.punct.ASSIGN_XOR? (lambda (k) (= k :PPTRIE.punct.ASSIGN_XOR)))
(define :PPTRIE.punct.ASSIGN_IOR? (lambda (k) (= k :PPTRIE.punct.ASSIGN_IOR)))

(define PPTRIE.key.hash
  (make-hash
    (list
      (cons :PPTRIE.key.AUTO CTOK.AUTO)
      (cons :PPTRIE.key.ENUM CTOK.ENUM)
      (cons :PPTRIE.key.RESTRICT CTOK.RESTRICT)
      (cons :PPTRIE.key.UNSIGNED CTOK.UNSIGNED)
      (cons :PPTRIE.key.BREAK CTOK.BREAK)
      (cons :PPTRIE.key.EXTERN CTOK.EXTERN)
      (cons :PPTRIE.key.RETURN CTOK.RETURN)
      (cons :PPTRIE.key.VOID CTOK.VOID)
      (cons :PPTRIE.key.CASE CTOK.CASE)
      (cons :PPTRIE.key.FLOAT CTOK.FLOAT)
      (cons :PPTRIE.key.SHORT CTOK.SHORT)
      (cons :PPTRIE.key.VOLATILE CTOK.VOLATILE)
      (cons :PPTRIE.key.CHAR CTOK.CHAR)
      (cons :PPTRIE.key.FOR CTOK.FOR)
      (cons :PPTRIE.key.SIGNED CTOK.SIGNED)
      (cons :PPTRIE.key.WHILE CTOK.WHILE)
      (cons :PPTRIE.key.CONST CTOK.CONST)
      (cons :PPTRIE.key.GOTO CTOK.GOTO)
      (cons :PPTRIE.key.SIZEOF CTOK.SIZEOF)
      (cons :PPTRIE.key.CONTINUE CTOK.CONTINUE)
      (cons :PPTRIE.key.IF CTOK.IF)
      (cons :PPTRIE.key.STATIC CTOK.STATIC)
      (cons :PPTRIE.key.DEFAULT CTOK.DEFAULT)
      (cons :PPTRIE.key.INLINE CTOK.INLINE)
      (cons :PPTRIE.key.STRUCT CTOK.STRUCT)
      (cons :PPTRIE.key.DO CTOK.DO)
      (cons :PPTRIE.key.INT CTOK.INT)
      (cons :PPTRIE.key.SWITCH CTOK.SWITCH)
      (cons :PPTRIE.key.DOUBLE CTOK.DOUBLE)
      (cons :PPTRIE.key.LONG CTOK.LONG)
      (cons :PPTRIE.key.TYPEDEF CTOK.TYPEDEF)
      (cons :PPTRIE.key.ELSE CTOK.ELSE)
      (cons :PPTRIE.key.REGISTER CTOK.REGISTER)
      (cons :PPTRIE.key.UNION CTOK.UNION)
 )))

(define PPTRIE.punct.hash
  (make-hash
    (list
      (cons :PPTRIE.punct.COMMA CTOK.COMMA)
      (cons :PPTRIE.punct.COLON CTOK.COLON)
      (cons :PPTRIE.punct.SEMICOLON CTOK.SEMICOLON)
      (cons :PPTRIE.punct.ELLIPSIS CTOK.ELLIPSIS)
      (cons :PPTRIE.punct.OPEN_BRACKET CTOK.OPEN_BRACKET)
      (cons :PPTRIE.punct.CLOSE_BRACKET CTOK.CLOSE_BRACKET)
      (cons :PPTRIE.punct.OPEN_BRACE CTOK.OPEN_BRACE)
      (cons :PPTRIE.punct.CLOSE_BRACE CTOK.CLOSE_BRACE)
      (cons :PPTRIE.punct.OPEN_PAREN CTOK.OPEN_PAREN)
      (cons :PPTRIE.punct.CLOSE_PAREN CTOK.CLOSE_PAREN)
      (cons :PPTRIE.punct.QUESTION CTOK.QUESTION)
      (cons :PPTRIE.punct.LOGOR CTOK.LOGOR)
      (cons :PPTRIE.punct.LOGAND CTOK.LOGAND)
      (cons :PPTRIE.punct.LOGNOT CTOK.LOGNOT)
      (cons :PPTRIE.punct.INCLUSIVE_OR CTOK.INCLUSIVE_OR)
      (cons :PPTRIE.punct.EXCLUSIVE_OR CTOK.EXCLUSIVE_OR)
      (cons :PPTRIE.punct.AND CTOK.AND)
      (cons :PPTRIE.punct.NOT CTOK.NOT)
      (cons :PPTRIE.punct.EQUAL CTOK.EQUAL)
      (cons :PPTRIE.punct.DIFFERENT CTOK.DIFFERENT)
      (cons :PPTRIE.punct.LESS_THAN CTOK.LESS_THAN)
      (cons :PPTRIE.punct.GREATER_THAN CTOK.GREATER_THAN)
      (cons :PPTRIE.punct.LESS_OR_EQUAL CTOK.LESS_OR_EQUAL)
      (cons :PPTRIE.punct.GREATER_OR_EQUAL CTOK.GREATER_OR_EQUAL)
      (cons :PPTRIE.punct.ASTERISK CTOK.ASTERISK)
      (cons :PPTRIE.punct.DIVISION CTOK.DIVISION)
      (cons :PPTRIE.punct.REMAINDER CTOK.REMAINDER)
      (cons :PPTRIE.punct.ADDITION CTOK.ADDITION)
      (cons :PPTRIE.punct.SUBTRACTION CTOK.SUBTRACTION)
      (cons :PPTRIE.punct.SHIFT_LEFT CTOK.SHIFT_LEFT)
      (cons :PPTRIE.punct.SHIFT_RIGHT CTOK.SHIFT_RIGHT)
      (cons :PPTRIE.punct.DOT CTOK.DOT)
      (cons :PPTRIE.punct.ARROW CTOK.ARROW)
      (cons :PPTRIE.punct.INCREMENTER CTOK.INCREMENTER)
      (cons :PPTRIE.punct.DECREMENTER CTOK.DECREMENTER)
      (cons :PPTRIE.punct.ASSIGN CTOK.ASSIGN)
      (cons :PPTRIE.punct.ASSIGN_MUL CTOK.ASSIGN_MUL)
      (cons :PPTRIE.punct.ASSIGN_DIV CTOK.ASSIGN_DIV)
      (cons :PPTRIE.punct.ASSIGN_REM CTOK.ASSIGN_REM)
      (cons :PPTRIE.punct.ASSIGN_ADD CTOK.ASSIGN_ADD)
      (cons :PPTRIE.punct.ASSIGN_SUB CTOK.ASSIGN_SUB)
      (cons :PPTRIE.punct.ASSIGN_SHL CTOK.ASSIGN_SHL)
      (cons :PPTRIE.punct.ASSIGN_SHR CTOK.ASSIGN_SHR)
      (cons :PPTRIE.punct.ASSIGN_AND CTOK.ASSIGN_AND)
      (cons :PPTRIE.punct.ASSIGN_XOR CTOK.ASSIGN_XOR)
      (cons :PPTRIE.punct.ASSIGN_IOR CTOK.ASSIGN_IOR)
 )))


